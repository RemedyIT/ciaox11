
// generated from <%= ridl_template_path %>
// Unaliased type : <%= resolved_cxxtype %>
% alias_md5 =  resolved_cxxtype.to_md5
// MD5            : <%= alias_md5 %>
#if !defined(_ALIAS_<%= alias_md5 %>_PSDD_TRAITS_DECL_)
#define _ALIAS_<%= alias_md5 %>_PSDD_TRAITS_DECL_

namespace PSDD
{
  template <>
  struct traits< <%= scoped_cxxtype %>>
    : public common_traits< <%= scoped_cxxtype %>>
    , public sequence_packing< <%= scoped_element_cxxtype %><% if is_bounded? %>, <%= bound %>U<% end %>>
  {
    static
    std::string get_type_name () { return "<%= scoped_cxxname %>"; }

    typedef std::false_type key_only;
    typedef std::true_type no_key;
  };

} // PSDD

#endif
