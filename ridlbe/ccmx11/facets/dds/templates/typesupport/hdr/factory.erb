
% topic_namespaces.each do |_topic_ns|
namespace <%= _topic_ns %>
{
%   inc_nest
% end
// generated from <%= ridl_template_path %>
class <%= typesupport_export_macro %><%= cxxname %>Factory final
{
public:
  static ::DDS::ReturnCode_t
  register_type (
    IDL::traits< ::DDS::DomainParticipant>::ref_type participant,
    const std::string &type_name);

  static ::DDS::ReturnCode_t
  unregister_type (
    IDL::traits< ::DDS::DomainParticipant>::ref_type participant,
    const std::string &type_name);
private:
  <%= cxxname %>Factory() = delete;
  ~<%= cxxname %>Factory() = delete;
  <%= cxxname %>Factory (const <%= cxxname %>Factory&) = delete;
  <%= cxxname %>Factory (<%= cxxname %>Factory&&) = delete;
  <%= cxxname %>Factory& operator= (const <%= cxxname %>Factory&) = delete;
  <%= cxxname %>Factory& operator= (<%= cxxname %>Factory&&) = delete;
};
% topic_namespaces.reverse_each do |_topic_ns|
%   dec_nest
} // namespace <%= _topic_ns %>
% end
