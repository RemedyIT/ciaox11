# This plan makes sure that the synchronous interface is connected directly to
# the receiver component via the CORBA connectors.
# This plan does *not* use the synchronous port on the AMI connector. See
# plan_ami_sync.config for that configuration.

# AMI4CCM with ExF should not not be connected colocated to a receiver component,
# at that moment the arguments can't be handled. In dancex11 we could pass
# -ORBAMICollocation 0 to the ORB_init, but that would result in a thread switch
# in all cases when AMI4CCM is used

#=====================================================
# Definitions for Receiver Node
#-----------------------------------------------------

#=====================================================
# Definitions for Sender Node
#-----------------------------------------------------

# locality manager instance for locality "SenderLocality" on Node "SenderNode"
nl.remedy.it.DnCX11.LocalityManager SenderLocality
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Locality.ConfigFile "exf-localitymanager.config"
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Locality.Arguments "-ORBAMICollocation 0"

# ReceiverComponent instance
nl.remedy.it.CCM.Component Hello_ReceiverComponent hello_exf_r_exec create_Hello_Receiver_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_Receiver_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"

# Receiver CORBA Connector instance
nl.remedy.it.CCM.Component Receiver_CORBA_connector hello_exf_corba_conn create_Hello_MyFoo_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_MyFoo_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Hello_ReceiverComponent
      srr_receptacle < do_my_foo

# SenderComponent instance
nl.remedy.it.CCM.Component Hello_SenderComponent hello_exf_s_exec create_Hello_Sender_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_Sender_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"

# Sender CORBA Connector instance for
nl.remedy.it.CCM.Component Sender_CORBA_connector hello_exf_corba_conn create_Hello_MyFoo_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_MyFoo_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      srr_facet > run_my_foo
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connector
      srr_receptacle < srr_facet

# AMI ConnectorComponent instance
nl.remedy.it.CCM.Component AMI_ConnectorComponent hello_exf_ami4ccm_conn create_Hello_AMI4CCM_MyFoo_Connector_AMI4CCM_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_AMI4CCM_MyFoo_Connector_AMI4CCM_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      ami4ccm_port_ami4ccm_provides > sendc_run_my_foo
    # Synch connection which the AMI4CCM connector uses to invoke methods on the
    # receiver component (the CORBA connector of the receiver component).
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connector
      ami4ccm_port_ami4ccm_uses < srr_facet
