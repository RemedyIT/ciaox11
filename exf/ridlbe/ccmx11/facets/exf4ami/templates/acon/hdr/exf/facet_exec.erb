
// generated from <%= ridl_template_path %>
/// Executor implementation class for <%= lem_name %> facet
class <%= lem_name %>_exec_i final
  : public IDL::traits<<%= interface_type.scoped_ccm_name %>>::base_type
{
public:
  /// Constructor
  /// @param[in] context Component context
  explicit <%= lem_name %>_exec_i (
     IDL::traits<<%= component.scoped_ccm_name %>_Context>::ref_type context);

  /// Destructor
  ~<%= lem_name %>_exec_i () override = default;

%if interface_type.all_operations.size > 0
  /** @name Operations from  <%= interface_type.scoped_ccm_name %> */
  //@{
% interface_type.all_operations.each do |_op|
%   nest { _op.visit_operation }
% end
  //@}
%end

%if interface_type.all_attributes.size > 0
  /** @name Attributes from <%= interface_type.scoped_ccm_name %> */
  //@{
% interface_type.all_attributes.each do |_att|
%   nest { _att.visit_attribute }
% end
  //@}

%end
  void
  set_config(const ::Components::ConfigValues& config);

private:
  /// Context for component instance. Used for all middleware communication.
  IDL::traits<<%= component.scoped_ccm_name %>_Context>::ref_type context_;
% if !cxxname.include? 'sync'
% _derived_scoped_interface = interface_type.scoped_cxxname.sub('AMI4CCM_','')
% _derived_interface = interface_type.cxxname.sub('AMI4CCM_','')
% _reply_handler_interface = interface_type.ami4ccm_ReplyHandler.sub('AMI4CCM_','')

  /// AMI POA that is used to register any CORBA AMI reply handlers
  IDL::traits<PortableServer::POA>::ref_type ami_poa_;

  IDL::traits<CIAOX11::ExF::SchedulingLane>::ref_type scheduling_lane_ {};

%if interface_type.all_operations.size > 0
%  interface_type.all_operations.each do |_op|
  CIAOX11::ExF::Settings <%=_op.name %>_exf_settings_ {};
%  end
%end
%if interface_type.all_attributes.size > 0
%  interface_type.all_attributes.each do |_att|
  CIAOX11::ExF::Settings <%= _att.name %>_exf_settings_ {};
%  end
%end

  /// Helper method to retrieve the CORBA AMI stub and CORBA AMI reply handler
  CORBA::amic_traits<<%= _derived_scoped_interface %>>::ref_type
  get_receptacle_and_handler (
    const IDL::traits<<%= interface_type.scoped_enclosure_cxxname %>::<%= _reply_handler_interface %>>::ref_type& ami4ccm_reply_handler,
    CORBA::amic_traits<<%= _derived_scoped_interface %>>::replyhandler_ref_type& reply_handler,
    CIAOX11::ExF::Settings exf_settings);

% end
  /** @name Illegal to be called. Deleted explicitly to let the compiler detect any violation */
  //@{
  <%= lem_name %>_exec_i() = delete;
  <%= lem_name %>_exec_i(const <%= lem_name %>_exec_i&) = delete;
  <%= lem_name %>_exec_i(<%= lem_name %>_exec_i&&) = delete;
  <%= lem_name %>_exec_i& operator=(const <%= lem_name %>_exec_i&) = delete;
  <%= lem_name %>_exec_i& operator=(<%= lem_name %>_exec_i&&) = delete;
  //@}
};
