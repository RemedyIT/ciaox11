component 'another_comp' do |comp|

  #data/type idl  shapes.idl isn't used in port or attribute, so this include
  #shall not become included in the 'another_comp.idl file"
  comp.idl %w{ hello.idl shapes.idl foo.idl bar.idl}

  #define component 'AnotherComp', not in a module
  comp.define 'AnotherComp' do |intf|

    #facet port with interface Foo::MyFoor defined in foo.idl
    intf.port 'run_my_bar_foo_prov' do |p|
      p.provides 'Foo::MyFoo'
    end

    intf.attribute 'my_sen_attrib' do |att|
      att.type 'long'
      # readonly is false ( = default)
    end

    # readable attribute with type Foo::Bar, defined in foo.idl
    intf.attribute 'TestBar' do |att|
      att.type 'Foo::Bar'
    end

    #condensed defines of attributes
    intf.attribute 'my_sen_attrib_2',type: 'long',readonly: true
    intf.attribute 'my_sen_attrib_3',type: 'long',readonly: false
    intf.attribute 'TestBar_2', type: 'Foo::Bar'

    # readable attribute with type Foo::Bar_in_Bar, defined in bar.idl
    intf.attribute 'TestBarBar' do |att|
      att.type 'Foo::Bar_in_Bar'
    end

    # readable attribute with type Foo::Bar_with_nested_bar, defined in foo.idl,
    # which needs nested_foo.idl
    intf.attribute 'TestBarNestedBar' do |att|
      att.type 'Foo::Bar_with_nested_bar'
    end


  end

end
