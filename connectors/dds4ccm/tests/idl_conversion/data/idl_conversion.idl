/**
 * @file    idl_conversion.idl
 * @author  Marcel Smit
 *
 * @brief   Base IDL for a stress test.
 *
 * @copyright Copyright (c) Remedy IT Expertise BV
 */
#ifndef IDL_CONVERSION_BASE_IDL_
#define IDL_CONVERSION_BASE_IDL_

module Example {

  struct B02 {
    long  B02_1;
  }; //@TopLevel(false)

  typedef sequence<B02> B10;
  typedef sequence<B02, 15> B11;

  typedef sequence<octet>     B12;
  typedef sequence<octet, 15> B13;
  typedef sequence<octet>     B14;

  typedef sequence<long> B15;
  typedef double         B16[4][5];

  typedef sequence<boolean> B17;
  typedef sequence<boolean, 15> B18;

  typedef sequence<unsigned long long> B19_1;
  typedef sequence<unsigned long long, 10> B19_2;
  typedef sequence<long long> B19_3;
  typedef sequence<long long, 10> B19_4;

  typedef double B20_1;
  typedef B20_1  B20_2;

  typedef sequence <B20_1, 100> B20_3;

  typedef sequence <double, 1> B20_0;
  typedef sequence <B20_1, 1> B20_4;
  typedef sequence <B20_2, 1> B21_5;
  typedef B21_5 B21_6;

  struct B31 {
    long B31_1;
  }; //@TopLevel(false)

  typedef B31 B32[2];
  typedef B31 B33[4][5];
  typedef B31 B34[6][7][8];

  typedef long B40[2];
  typedef long B41[2][3];

  typedef long B42[2];
  typedef long B43[4];

  typedef string    B_50;
  typedef string<5> B51;
  typedef double    B52;
  typedef B32       B53;
  typedef B_50      B_54;
  typedef B51       B55;
  typedef string    B56[6][5];
  typedef sequence<string> B57;
  typedef string<512> B58;
  typedef sequence<B58> B59;
  typedef B59       B60;

//   Not supported yet by the conversion traits
//   typedef wstring    B61;
//   typedef wstring<5> B62;
//   typedef wstring<5> B63;
//   typedef wstring    B64[6][5];

  enum B70 {
    B70_1,
    B70_2,
    B70_3
  };

  union B80 switch (B70) {
    case B70_1: B70 b_80_1;
    case B70_2: B70 b_80_2;
    case B70_3: B70 b_80_3;
  };

  struct B81 {
    long a;
    string b;
    B58 c;
  }; //@TopLevel(false)
  typedef sequence <B81> B82;
  struct B83 {
    string a;
    long b;
    string c;
    string d;
    long e;
    B82 f;
    unsigned long long g;
    long long h;
  };

  union B85 switch (long) {
    case 1: B42 b_85_1;
    case 2: B43 b_85_2;
    case 3: B41 b_85_3;
  };

  struct IDLConversionMessage {
    char           a_01;
    wchar          a_02;
    octet          a_03;
    short          a_04;
    unsigned short a_05;
    long           a_06;
    unsigned long  a_07;
    long long      a_08;
    unsigned long long a_09;
    float          a_10;
    double         a_11;
    long double    a_12;
    boolean        a_13;

    B10 b_10;
    B11 b_11;

    B12 b_12;
    B13 b_13;
    B14 b_14;

    B15 b_15;
    B16 b_16;

    B17 b_17;
    B18 b_18;

    B19_1 b_19_1;
    B19_2 b_19_2;
    B19_3 b_19_3;
    B19_4 b_19_4;

    B20_4 b_20;
    B21_6 b_21;

    B32 b_32;
    B33 b_33;
    B34 b_34;

    B40 b_40;
    B41 b_41;
    B42 b_42;
    B43 b_43;

    B_50 b__50;
    B51 b_51;
    B52 b_52;
    B53 b_53;
    B_54 b__54;
    B55 b_55;
    B56 b_56;
    B57 b_57;
    B59 b_59;
    B60 b_60;

//     B61 b_61;
//     B62 b_62;
//     B63 b_63;
//     B64 b_64;

    B70 b_70;

    B80 b_80;

    B83 b_83;

    B85 b_85;

    string key;
    short iteration;
  }; //@TopLevel()

  struct ColorStruct;
  typedef sequence <ColorStruct> ColorList;
  struct ColorStruct {
    string colorString;
    long colorNum;
  };

  struct Color2Struct;
  typedef sequence<Color2Struct> Color2List;
  typedef sequence<Color2Struct> Color2Seq;
  struct Color2Struct {
    string colorString;
    long colorNum;
  };

  struct Color3Struct;
  typedef sequence<Color3Struct> Color3List;
  struct Color3Struct {
    string colorString;
    long colorNum;
  }; //@TopLevel()
  typedef sequence<Color3Struct> Color3Seq;

  struct Color4Struct;
  typedef sequence<Color4Struct> Color4List;
  typedef sequence<Color4Struct> Color4Seq;
  struct Color4Struct {
    string colorString;
    long colorNum;
    Color3Seq color2seq;
  }; //@TopLevel()

  union B03;
  typedef sequence <B03> B03List;
  union B03 switch (long)
  {
    case 2: short b_03_3;
  };
};

module Foo
{
  typedef long _module;
  struct ColorStruct;
  typedef sequence <ColorStruct> ColorList;
  typedef sequence <ColorStruct> ColorSeq;
  struct ColorStruct {
    string colorString;
    long colorNum;
    _module moduleNum;
  };
};

module UnionTest
{
  typedef long _module;
  union B03;
  typedef sequence <B03> B03List;
  typedef sequence <B03> B03Seq;
  union B03 switch (long)
  {
    case 2: short b_03_3;
    case 3: _module b_03_4;
  };
};

module Escaping
{
  union _private;
  union _private switch (long)
  {
    case 2: short b_03_3;
  }; //@TopLevel()
  struct _public;
  struct _public
  {
    string bar;
  }; //@TopLevel()
};

module Foo
{
  module _ATTRIBUTE
  {
    struct TopicA
    {
      string a;
    }; //@TopLevel()
  };
};

// Test a module with only non-DDS translatable types/constants
// => should result in omitted module in DDS IDL
module Empty
{
  const string MyStringVal = "MyString";

  const long MyLongVal = 100;

  exception ExBoo {};
};

module IDL_Module
{
  interface foo
  {
    void do_something ();
  };
};

module SequenceTest
{
  typedef long myLong;
  typedef sequence <myLong> myLongSeq;
  typedef sequence <myLong, 16> myLongSeq_b16;
  struct My_msg
  {
    myLong myl;
    myLongSeq mylseq;
  }; //@TopLevel()

  struct My_msg2
  {
    long myl;
  }; //@TopLevel()
  typedef sequence <My_msg2> My_msg2Seq;

  union My_msg3 switch (long)
  {
    case 2: long myl;
  }; //@TopLevel()
  typedef sequence <My_msg3> My_msg3Seq;

  struct My_msg4
  {
    long myl;
  }; //@TopLevel()
  typedef sequence <My_msg4, 12> My_msg4Bounded;

  union My_msg5 switch (long)
  {
    case 2: My_msg4Bounded myl;
  }; //@TopLevel()
  typedef sequence <My_msg5> My_msg5Seq;
  typedef sequence <My_msg5, 12> My_msg5_b12;
  typedef sequence <My_msg5, 11> My_msg5_b11;
};

#endif /* IDL_CONVERSION_BASE_IDL_ */
