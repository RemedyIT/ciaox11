%if has_toplevel_annotation?

% unaliased_type = 'std::vector< '+resolved_cxxtype+'>'
// Unaliased type      : <%= unaliased_type %>
// Scoped element type : <%= scoped_cxxtype %>
% ddsx11_alias_md5 = (unaliased_type+scoped_cxxtype).to_md5
// DDSX11 MD5 : <%= ddsx11_alias_md5 %>
namespace DDSX11
{
#if !defined(_ALIAS_<%= ddsx11_alias_md5 %>_UDT_TRAITS_DECL_)
#define _ALIAS_<%= ddsx11_alias_md5 %>_UDT_TRAITS_DECL_
  // generated from <%= ridl_template_path %>
  /// Conversion of <%= scoped_seq_cxxtype %> to DDS
  template<>
  inline <%= native_scoped_seq_cxxtype %>&
  to_dds< <%= native_scoped_seq_cxxtype %>, <%= scoped_seq_cxxtype %>> (
    <%= native_scoped_seq_cxxtype %> &to, const <%= scoped_seq_cxxtype %> &from)
  {
    return DDSX11::sequence_to_dds(to, from);
  }

  /// Conversion traits for <%= scoped_seq_cxxtype %> from DDS
  template<>
  inline <%= scoped_seq_cxxtype %>&
  from_dds< <%= native_scoped_seq_cxxtype %>, <%= scoped_seq_cxxtype %>> (
    <%= scoped_seq_cxxtype %> &to, const <%= native_scoped_seq_cxxtype %> &from)
  {
    return DDSX11::sequence_from_dds(to, from);
  }
#endif /* _ALIAS_<%= ddsx11_alias_md5 %>_UDT_TRAITS_DECL_ */

  template<>
  struct traits< <%= scoped_seq_cxxtype %>>
    : public common_traits< <%= scoped_seq_cxxtype %>, <%= native_scoped_seq_cxxtype %>>
    , public convert_in< <%= scoped_seq_cxxtype %>, <%= native_scoped_seq_cxxtype %>>
    , public convert_out_by_ref< <%= scoped_seq_cxxtype %>, <%= native_scoped_seq_cxxtype %>>
    , public convert_retn< <%= scoped_seq_cxxtype %>, <%= native_scoped_seq_cxxtype %>>
  {
  };
} /* DDSX11 */

%end
