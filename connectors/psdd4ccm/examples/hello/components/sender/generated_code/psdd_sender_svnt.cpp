/**
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT Expertise BV
 *        The Netherlands
 *        https://www.remedy.nl
 */

#include "psdd_sender_svnt.h"


// generated from ccmx11/templates/svnt/src/component
namespace Test_Sender_Impl
{

  Sender_ExecutorLocator::Sender_ExecutorLocator (
      IDL::traits< ::Test::CCM_Sender>::ref_type component_executor,
      IDL::traits<Sender_Context>::ref_type component_context) :
        component_executor_ (std::move (component_executor)),
        component_context_ (std::move (component_context))
  {
  }

  bool
  Sender_ExecutorLocator::connect (
      const ::Components::FeatureName& name,
      IDL::traits<CORBA::Object>::ref_type connection,
      const std::string& conn_name,
      const ::Components::ConfigValues& config)
  {
    X11_UNUSED_ARG(config);
    // generated from ccmx11/templates/svnt/src/component_connect
    X11_UNUSED_ARG(conn_name);
    return this->component_context_->set_connection (name, std::move(connection));
  }

  bool
  Sender_ExecutorLocator::disconnect (
      const ::Components::FeatureName& name,
      const std::string& conn_name)
  {
    X11_UNUSED_ARG(conn_name);
    return this->component_context_->reset_connection (name);
  }

  void
  Sender_ExecutorLocator::configure (
      ::Components::ConfigValues& config)
  {
    this->set_configuration (config);
  }

  void
  Sender_ExecutorLocator::set_configuration (const Components::ConfigValues& descr)
  {
    Components::NameList name_list;
    for (const auto& config_value : descr)
    {
      Components::FeatureName const & descr_name = config_value.name ();
      CORBA::Any const & descr_value = config_value.value ();

      if (descr_name == "mode")
      {
        std::string _extract_val{};
        if (!(descr_value >>= _extract_val))
        {
          // Unable to extract value from Any
          name_list.push_back (descr_name);
        }
        else
        {
          this->component_executor_->mode (_extract_val);
        }
      }
      else if (descr_name == "count")
      {
        uint32_t _extract_val{};
        if (!(descr_value >>= _extract_val))
        {
          // Unable to extract value from Any
          name_list.push_back (descr_name);
        }
        else
        {
          this->component_executor_->count (_extract_val);
        }
      }
      else if (descr_name == "delay")
      {
        uint32_t _extract_val{};
        if (!(descr_value >>= _extract_val))
        {
          // Unable to extract value from Any
          name_list.push_back (descr_name);
        }
        else
        {
          this->component_executor_->delay (_extract_val);
        }
      }
    }
    if (!name_list.empty ())
    {
      throw CIAOX11::ConfigurationError (name_list);
    }
  }

  IDL::traits<CORBA::Object>::ref_type
  Sender_ExecutorLocator::obtain_executor ()
  {
    return this->component_executor_;
  }


  // generated from ccmx11/templates/svnt/src/component_obtain_facet_executor
  IDL::traits<CORBA::Object>::ref_type
  Sender_ExecutorLocator::obtain_facet_executor (
    const ::Components::FeatureName& name,
    ::Components::ConfigValues& /*config*/)
  {
    // no match
    throw CIAOX11::InvalidName (name);
  }

  Sender_Context::Sender_Context (
      IDL::traits<CIAOX11::Service_Registry>::ref_type svcreg,
      std::string ins_name) :
        service_registry_ (std::move (svcreg)),
        instance_id_ (std::move (ins_name))
  {
  }

  IDL::traits< ::CIAOX11::Service_Registry>::ref_type
  Sender_Context::the_service_registry ()
  {
    return this->service_registry_;
  }

  IDL::traits<Test::Hello::Publisher>::ref_type
  Sender_Context::get_connection_hello_pub ()
  {
    return this->hello_pub_;
  }
  IDL::traits<Test::Msg::Publisher>::ref_type
  Sender_Context::get_connection_msg_pub ()
  {
    return this->msg_pub_;
  }
  IDL::traits<CCM_TT::TT_Scheduler>::ref_type
  Sender_Context::get_connection_tt_scheduler ()
  {
    return this->tt_scheduler_;
  }


  // generated from ccmx11/templates/svnt/src/context_set_connection
  bool
  Sender_Context::set_connection (
    const std::string& name,
    IDL::traits<CORBA::Object>::ref_type connection)
  {
    if (name == "hello_pub")
    {
      this->hello_pub_ = IDL::traits<Test::Hello::Publisher>::narrow (std::move(connection));
    }
    else if (name == "msg_pub")
    {
      this->msg_pub_ = IDL::traits<Test::Msg::Publisher>::narrow (std::move(connection));
    }
    else if (name == "tt_scheduler")
    {
      this->tt_scheduler_ = IDL::traits<CCM_TT::TT_Scheduler>::narrow (std::move(connection));
    }
    else
    {
      return false;
    }
    return true;
  }


  // generated from ccmx11/templates/svnt/src/context_reset_connection
  bool
  Sender_Context::reset_connection (
    const std::string& name)
  {
    if (name == "hello_pub")
    {
      this->hello_pub_ = nullptr;
    }
    else if (name == "msg_pub")
    {
      this->msg_pub_ = nullptr;
    }
    else if (name == "tt_scheduler")
    {
      this->tt_scheduler_ = nullptr;
    }
    else
    {
      return false;
    }
    return true;
  }

  std::string
  Sender_Context::instance_id ()
  {
    return this->instance_id_;
  }
} /* Test_Sender_Impl */

extern "C" void
create_Test_Sender_Servant (
  IDL::traits<Components::EnterpriseComponent>::ref_type p,
  IDL::traits<CIAOX11::Service_Registry>::ref_type svcreg,
  const std::string& ins_name,
  IDL::traits<CIAOX11::ExecutorLocator>::ref_type& executor_locator)
{
  IDL::traits< ::Test::CCM_Sender>::ref_type component_executor =
    IDL::traits< ::Test::CCM_Sender>::narrow (std::move(p));

  if (component_executor)
  {
    // Create the context for this component, passing in it's ServiceRegistry
    IDL::traits<Test_Sender_Impl::Sender_Context>::ref_type context =
      CORBA::make_reference<Test_Sender_Impl::Sender_Context> (std::move(svcreg), ins_name);

    // Set the new context onto the user component executor
    component_executor->set_session_context (context);

    // Create the executor locator which holds the references
    // to all created entities
    executor_locator =
      CORBA::make_reference <Test_Sender_Impl::Sender_ExecutorLocator> (
        std::move (component_executor),
        std::move (context));
  }
}

// -*- END -*-
