// Simple version of the MPC file. Please see the gen_test for an
// granulated version of the MPC files.

// Compiling the base IDL, generating all files needed for the CORBA connector.
// All files are generated in the generated_code directory. This way the
// user code is separated from the framework code.
// Generates
//   the skeleton files of the original IDL file (hello.idl)
//   The CORBA connector files:
//     the implied IDL CORBA connector IDL file (hello_cc.idl)
//     the stub files of the CORBA connector IDL file
//     the lem IDL of the CORBA connector IDL (hello_ccE.idl)
//     the stub files of the lem IDL files (hello_ccE.idl)
// Important RIDL Commandline options:
//   -Wb,base_export_macro   : base name for all export macros
//   -Wb,base_export_include : base name for all export include files
//   -Gxhsk                  : Generates the skeleton export file. The macro
//                             name and the file name are constructed out
//                             of the base_name options.
//   -Gcorba4ccm,conn        : generates all needed files for a CORBA connector,
//                             including the needed export files
//   -o generated_code       : Generate files in this subdirectory
project(*cc_idl_gen) : ciaox11_test_cc_base_idl {
  custom_only = 1
  after += gen_test_simple_base_idl_gen gen_test_simple_base_lem_gen
  idlflags += -Wb,base_export_macro=HELLO \
              -Wb,base_export_include=hello
  IDL_Files {
    gendir=generated_code
    ../base/hello.idl
  }
}

// Compiles the corba connector. All (skel and (lem)stub) can be compiled
// into one libary since no other parts of this test need the skeleton
// and/or the lem stub.
// The library consists of a 'server' part and a 'client' part. These are
// not separated as such. Therefor this library needs the skeleton as
// well as the stub files.
// Mind the 'CC' prefix. This will be implicitly added by the RIDL
// compiler.
project(*corba_conn) : ciaox11_test_base, ciaox11_executor, ciaox11_corba4ccm_impl {
  after += gen_test_simple_base_stub gen_test_simple_base_lem_stub *cc_idl_gen
  libs  += gen_test_simple_base_stub gen_test_simple_base_lem_stub

  dynamicflags += HELLO_SKEL_BUILD_DLL \
                  HELLO_CC_LEM_STUB_BUILD_DLL \
                  HELLO_CC_EXEC_BUILD_DLL \
                  HELLO_CC_SVNT_BUILD_DLL

  Source_Files {
    generated_code/helloS.cpp

    generated_code/hello_ccEC.cpp

    generated_code/hello_cc_exec.cpp
    generated_code/hello_cc_svnt.cpp
  }
  Header_Files {
    generated_code/helloS.h
    generated_code/helloSP.h
    generated_code/hello_skel_export.h

    generated_code/hello_ccEC.h
    generated_code/hello_cc_lem_stub_export.h

    generated_code/hello_cc_exec.h
    generated_code/hello_cc_exec_export.h

    generated_code/hello_cc_svnt.h
    generated_code/hello_cc_svnt_export.h
  }
}
