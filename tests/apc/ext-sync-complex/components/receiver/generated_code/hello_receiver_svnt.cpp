/**
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT Expertise BV
 *        The Netherlands
 *        https://www.remedy.nl
 */

#include "hello_receiver_svnt.h"


// generated from ccmx11/templates/svnt/src/component
namespace Hello_Receiver_Impl
{

  Receiver_ExecutorLocator::Receiver_ExecutorLocator (
      IDL::traits< ::Hello::CCM_Receiver>::ref_type component_executor,
      IDL::traits<Receiver_Context>::ref_type component_context) :
        component_executor_ (std::move (component_executor)),
        component_context_ (std::move (component_context))
  {
  }

  bool
  Receiver_ExecutorLocator::connect (
      const ::Components::FeatureName& name,
      IDL::traits<CORBA::Object>::ref_type connection,
      const std::string& conn_name,
      const ::Components::ConfigValues& config)
  {
    X11_UNUSED_ARG(config);
    // generated from ccmx11/templates/svnt/src/component_connect
    X11_UNUSED_ARG(name);
    X11_UNUSED_ARG(connection);
    X11_UNUSED_ARG(conn_name);
    return false;
  }

  bool
  Receiver_ExecutorLocator::disconnect (
      const ::Components::FeatureName& name,
      const std::string& conn_name)
  {
    X11_UNUSED_ARG(name);
    X11_UNUSED_ARG(conn_name);
    return false;
  }

  void
  Receiver_ExecutorLocator::configure (
      ::Components::ConfigValues& config)
  {
    X11_UNUSED_ARG (config);
  }

  IDL::traits<CORBA::Object>::ref_type
  Receiver_ExecutorLocator::obtain_executor ()
  {
    return this->component_executor_;
  }


  // generated from ccmx11/templates/svnt/src/component_obtain_facet_executor
  IDL::traits<CORBA::Object>::ref_type
  Receiver_ExecutorLocator::obtain_facet_executor (
    const ::Components::FeatureName& name,
    ::Components::ConfigValues& /*config*/)
  {
    if (name == "do_my_B")
    {
      return this->component_executor_->get_do_my_B ();
    }
    // no match
    throw CIAOX11::InvalidName (name);
  }

  Receiver_Context::Receiver_Context (
      IDL::traits<CIAOX11::Service_Registry>::ref_type svcreg,
      std::string ins_name) :
        service_registry_ (std::move (svcreg)),
        instance_id_ (std::move (ins_name))
  {
  }

  IDL::traits< ::CIAOX11::Service_Registry>::ref_type
  Receiver_Context::the_service_registry ()
  {
    return this->service_registry_;
  }

  std::string
  Receiver_Context::instance_id ()
  {
    return this->instance_id_;
  }
} /* Hello_Receiver_Impl */

extern "C" void
create_Hello_Receiver_Servant (
  IDL::traits<Components::EnterpriseComponent>::ref_type p,
  IDL::traits<CIAOX11::Service_Registry>::ref_type svcreg,
  const std::string& ins_name,
  IDL::traits<CIAOX11::ExecutorLocator>::ref_type& executor_locator)
{
  IDL::traits< ::Hello::CCM_Receiver>::ref_type component_executor =
    IDL::traits< ::Hello::CCM_Receiver>::narrow (std::move(p));

  if (component_executor)
  {
    // Create the context for this component, passing in it's ServiceRegistry
    IDL::traits<Hello_Receiver_Impl::Receiver_Context>::ref_type context =
      CORBA::make_reference<Hello_Receiver_Impl::Receiver_Context> (std::move(svcreg), ins_name);

    // Set the new context onto the user component executor
    component_executor->set_session_context (context);

    // Create the executor locator which holds the references
    // to all created entities
    executor_locator =
      CORBA::make_reference <Hello_Receiver_Impl::Receiver_ExecutorLocator> (
        std::move (component_executor),
        std::move (context));
  }
}

// -*- END -*-
