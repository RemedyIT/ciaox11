==== AMI4CCM

Description::
AMI4CCM connectors are derived from user defined IDL interface definitions. Connectors are built from
standardized stub code (AMI4CCM connectors do not provide facets) generated from the user defined IDL. See the
<<{xref_docs_root}/ami4ccm/ami4ccm#,AMI4CCM>> documentation for the common details
regarding the implementation of the these connectors.
The implementation of ExF enabled AMI4CCM connectors requires the generation of tailored connector internal
CORBA AMI reply handler code as well as tailored executor and servant code.

Implementation::
To implement ExF enabled AMI4CCM connectors code needs to be generated using the following RIDL switch combinations. +
+
[width="100%",cols="<20%a,<50%a,<30%a",options="header",]
|=======================================================================
|Switches|Description|MPC base project(s)

|`-GExF`
|This switch added to a commandline for regular AMI4CCM connector generation will an generate ExF enabled connector
executor and servant code.
|`ciaox11_exf_idl`
|=======================================================================
+
Compiling and linking the ExF enabled code requires additional libraries as follows. +
+
[width="100%",cols="<30%a,<40%a,<30%a",options="header",]
|=======================================================================
|Libraries|Description|MPC base project(s)

|`ciaox11_exf_core`
|Required for compiling and linking the ExF enabled connector executor and servant.
|`ciaox11_exf_core`
|=======================================================================

Deployment::
Deployment is similar to deployment of regular AMI4CCM connectors. The only requirement is that the connector and
the user component it is to be connected to are being deployed in an ExF enabled locality and container. See
<<axcioma_exf#_deploying_with_exf,here>> for more details.

