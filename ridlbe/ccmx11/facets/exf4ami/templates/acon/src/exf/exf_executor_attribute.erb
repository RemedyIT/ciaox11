
  // generated from <%= ridl_template_path %>

  class get_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor final
  :  public AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor
  {
  public:
    get_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor (
          std::string event_id,
          IDL::traits<<%= receptacle_port.interface_type.scoped_enclosure_cxxname %>::<%= receptacle_port.interface_type.ami4ccm_ReplyHandler %>>::ref_type callback,
          <%= attribute.scoped_cxx_return_type %> ami_return_val,
          CIAOX11::ExF::Deadline dead_line,
          CIAOX11::ExF::Priority priority)
    : AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor(std::move (event_id), std::move(callback), std::move (dead_line), priority),
      ami_return_val_(ami_return_val)
    {}

    void
    execute_i () noexcept(true) override
    {
      this->callback_->get_<%= attribute.cxxname %> (this->ami_return_val_);
    }

  private:
    <%= attribute.scoped_cxx_return_type %> ami_return_val_;
  };

  class get_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Excep_Executor final
  :  public AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor
  {
  public:
    get_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Excep_Executor (
          std::string event_id,
          IDL::traits<<%= receptacle_port.interface_type.scoped_enclosure_cxxname %>::<%= receptacle_port.interface_type.ami4ccm_ReplyHandler %>>::ref_type callback,
          IDL::traits< ::CCM_AMI::ExceptionHolder>::ref_type excep_holder,
          CIAOX11::ExF::Deadline dead_line,
         CIAOX11::ExF::Priority priority)
    : AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor(std::move (event_id), std::move(callback), std::move (dead_line), priority),
    excep_holder_(std::move (excep_holder))
    {}

    void
    execute_i () noexcept(true) override
    {
      this->callback_->get_<%= attribute.cxxname %>_excep (this->excep_holder_);
    }

    private:
      IDL::traits< ::CCM_AMI::ExceptionHolder>::ref_type excep_holder_;
 };

% unless attribute.is_readonly?
  class set_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor final
  :  public AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor
  {
  public:
    set_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor (
         std::string event_id,
         IDL::traits<<%= receptacle_port.interface_type.scoped_enclosure_cxxname %>::<%= receptacle_port.interface_type.ami4ccm_ReplyHandler %>>::ref_type callback,
         CIAOX11::ExF::Deadline dead_line,
         CIAOX11::ExF::Priority priority)
    : AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor(std::move (event_id), std::move(callback), std::move (dead_line), priority)
    {}

    void
    execute_i () noexcept(true) override
    {
      this->callback_->set_<%= attribute.cxxname %> ();
    }
  };

  class set_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Excep_Executor final
  :  public AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor

  {
  public:
    set_<%= attribute.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Excep_Executor (
       std::string event_id,
       IDL::traits<<%= receptacle_port.interface_type.scoped_enclosure_cxxname %>::<%= receptacle_port.interface_type.ami4ccm_ReplyHandler %>>::ref_type callback,
       IDL::traits< ::CCM_AMI::ExceptionHolder>::ref_type excep_holder,
       CIAOX11::ExF::Deadline dead_line,
       CIAOX11::ExF::Priority priority)
    : AMI_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor(std::move (event_id), std::move(callback), std::move (dead_line), priority),
    excep_holder_(std::move (excep_holder))
    {}

    void
    execute_i () noexcept(true) override
    {
      this->callback_->set_<%= attribute.cxxname %>_excep (this->excep_holder_);
    }
  private:
    IDL::traits< ::CCM_AMI::ExceptionHolder>::ref_type excep_holder_;
  };
% end
