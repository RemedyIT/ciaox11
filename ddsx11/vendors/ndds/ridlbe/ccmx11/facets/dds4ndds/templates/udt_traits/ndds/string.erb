% if is_bounded_type?

// generated from <%= ridl_template_path %>
// Unaliased type : <%= resolved_cxxtype %>
% alias_md5 =  resolved_cxxtype.to_md5
// MD5            : <%= alias_md5 %>
#if !defined(_ALIAS_<%= alias_md5 %>_UDT_TRAITS_DECL_)
#define _ALIAS_<%= alias_md5 %>_UDT_TRAITS_DECL_

namespace DDSX11
{
  /// Conversion of <%= scoped_cxxname %> to DDS
  template<>
  inline char*&
  to_dds<char*, <%= scoped_cxxtype %>> (
    char* &to, const <%= scoped_cxxtype %> &from)
  {
    // Always allocate a buffer of max bound
    if (to == nullptr) to = DDS_String_alloc (IDL::traits< <%= scoped_cxxtype %>>::bound::value);
    // NDDS initialization should have pre-allocated a buffer of the right size
    std::strncpy (to, from.c_str (), IDL::traits< <%= scoped_cxxtype %>>::bound::value);
    return to;
  }

  /// Conversion of <%= scoped_cxxname %> from DDS
  template<>
  inline <%= scoped_cxxtype %>&
  from_dds<char*, <%= scoped_cxxtype %>> (
    <%= scoped_cxxtype %> &to, char* const &from)
  {
    to = <%= scoped_cxxtype %> (from);
    return to;
  }

  template <>
  struct traits< <%= scoped_cxxtype %>>
    : public common_traits< <%= scoped_cxxtype %>, char*>
    , public convert_in< <%= scoped_cxxtype %>, char*>
    , public convert_out_by_ref< <%= scoped_cxxtype %>, char*>
    , public convert_retn< <%= scoped_cxxtype %>, char*>
  {
  };
} // DDSX11

#endif /* _ALIAS_<%= alias_md5 %>_UDT_TRAITS_DECL_ */

% end
