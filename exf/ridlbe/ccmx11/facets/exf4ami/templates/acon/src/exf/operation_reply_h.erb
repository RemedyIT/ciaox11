// generated from <%= ridl_template_path %>
% _args = operation.arguments.dup
% if operation.is_void?
%     _arg_string = ""
%     _arg_string_empty = 1
% else
%     _arg_string = "#{operation.scoped_cxx_in_type} ami_return_val"
%     _arg_string_empty = 0
% end
% _op_start = "void #{interface_type.ami4ccm_reply_handler}::#{operation.cxxname} ("
% while !_args.empty?
%   _arg = _args.shift
%   if (_arg.direction == :out) || (_arg.direction == :inout)
%     if _arg_string_empty == 1
%      end_line = ""
%     else
%       end_line = ",\n"
%       end_line << (' ' * _op_start.size)
%     end
%     _arg_string << end_line
%     _arg_string << "#{_arg.scoped_cxx_in_type} #{_arg.cxxname}"
%     _arg_string_empty = 0
%   end
% end
<%= _op_start %><%= _arg_string %>)
{
  // Deactivate our CORBA AMI servant
  this->deactivate ();

  // Push the reply into ExF
  CIAOX11::ExF::Executor::ref_type exec =
    std::make_unique<<%= operation.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Executor> (
      "<%= operation.cxxname %>",
      this->callback_,
% unless operation.is_oneway? || operation.is_void?
      ami_return_val,
% end
%   operation.arguments.each do |_arg|
%       unless _arg.direction == :in
      <%= _arg.cxxname %>,
%       end
%   end
      this->deadline_,
      this->priority_);

    this->scheduling_lane_->submit (std::move (exec));
}

  void <%= interface_type.ami4ccm_reply_handler %>::<%= operation.cxxname %>_excep (
  IDL::traits<::Messaging::ExceptionHolder>::ref_type excep_holder)
  {
    // Deactivate our CORBA AMI servant
    this->deactivate ();

   IDL::traits<::CCM_AMI::ExceptionHolder>::ref_type holder =
      CORBA::make_reference<::CCM_AMI::ExceptionHolder_i> (std::move (excep_holder));

    // Push the reply into ExF
    CIAOX11::ExF::Executor::ref_type exec =
         std::make_unique<<%= operation.cxxname %>_<%= receptacle_port.interface_type.scoped_cxxname.identify %>_Excep_Executor> (
           "<%= operation.cxxname %>_excep",
           this->callback_,
           std::move (holder),
           this->deadline_,
           this->priority_);
    this->scheduling_lane_->submit (std::move (exec));
  }
