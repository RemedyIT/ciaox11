// generated from <%= ridl_template_path %>
% _args = operation.arguments.dup
% if operation.is_void?
%     _arg_string = ""
%     _arg_string_empty = 1
% else
%     _arg_string = "#{operation.scoped_cxx_in_type} ami_return_val"
%     _arg_string_empty = 0
% end
% _op_start = "void #{interface_type.ami4ccm_reply_handler}::#{operation.cxxname} ("
% while !_args.empty?
%   _arg = _args.shift
%   if (_arg.direction == :out) || (_arg.direction == :inout)
%     if _arg_string_empty == 1
%      end_line = ""
%     else
%       end_line = ",\n"
%       end_line << (' ' * _op_start.size)
%     end
%     _arg_string << end_line
%     _arg_string << "#{_arg.scoped_cxx_in_type} #{_arg.cxxname}"
%     _arg_string_empty = 0
%   end
% end
<%= _op_start %><%= _arg_string %>)
{
  // Deactivate our CORBA AMI servant
  this->deactivate ();

% first = 0
  this->callback_-><%= operation.cxxname %> (
% unless operation.is_oneway? || operation.is_void?
    ami_return_val
% first = 1
% end
%   operation.arguments.each do |_arg|
%       unless _arg.direction == :in
%         if first == 0
    <%= _arg.cxxname %>
%         first = 1
%         else
    , <%= _arg.cxxname %>
%         end
%       end
%   end
    );
}
void <%= interface_type.ami4ccm_reply_handler %>::<%= operation.name %>_excep (
  IDL::traits<Messaging::ExceptionHolder>::ref_type excep_holder)
{
  // Deactivate our CORBA AMI servant
  this->deactivate ();

  IDL::traits<CCM_AMI::ExceptionHolder>::ref_type holder =
    CORBA::make_reference<CCM_AMI::ExceptionHolder_i> (std::move(excep_holder));
  this->callback_-><%= operation.name %>_excep (std::move(holder));
}
