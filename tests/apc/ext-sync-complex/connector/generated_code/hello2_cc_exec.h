/**
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT Expertise BV
 *        The Netherlands
 *        https://www.remedy.nl
 */

#ifndef __RIDL_HELLO2_CC_EXEC_H_BHCHFCHE_INCLUDED__
#define __RIDL_HELLO2_CC_EXEC_H_BHCHFCHE_INCLUDED__

#include /**/ "ciaox11/versionx11.h"

#if CIAOX11_MAJOR_VERSION != 2 || CIAOX11_MINOR_VERSION != 3 || CIAOX11_MICRO_VERSION != 0
#error This file was generated with another RIDL CCMX11 backend version (2.3.0). Please re-generate.
#endif

#pragma once

#include "hello2_ccEC.h"

#include /**/ "hello_corba_cc_exec_export.h"

// generated from exf4cc/templates/comp_exec/hdr/corba/exf/component_post_pre
#include "exf/deployment/core/ciaox11_schedule.h"

// generated from corba4ccm/templates/comp_exec/hdr/corba/exf/include
#include "connectors/corba4ccm/corba4ccm/corba4ccmS.h"

// generated from corba4ccm/templates/comp_exec/hdr/corba/exf/include
#include "./hello2S.h"

// generated from corba4ccm/templates/comp_exec/hdr/corba/exf/component
/// Namespace for implementation of Hello_B_SRR::CORBA_Connector component
namespace Hello_B_SRR_CORBA_Connector_Impl
{

  /**
  * CORBA servant implementation for all the CORBA facet servants
  * using Hello::B.
  * This CORBA servant makes the facet executor remotely
  * accessible through CORBA. This CORBA servant implementation
  * is generated for each interface without using any
  * inheritance, all methods are very small and
  * the footprint reduction by using inheritance is pretty
  * low, but causes a lot of dependencies
  */
  class Hello_B_servant final :
    public CORBA::servant_traits<Hello::B>::base_type
  {
  public:
    /**
    * Constructor
    * @param facet_executor The facet executor this facet CORBA servant is handling the remote invocations
    */
    explicit Hello_B_servant (IDL::traits< ::Hello::B>::ref_type facet_executor);

    /// Virtual destructor
    virtual ~Hello_B_servant () = default;

    /// @name Operations from Hello::B
    //@{

    // generated from exf4cc/templates/comp_exec/hdr/corba/exf/svnt_operation
    /// @copydoc hello2.idl::Hello::B::op_B
    void
    op_B (
        Hello::ExF::B_op_B_RequestHandler::ref_type) override;

    // generated from exf4cc/templates/comp_exec/hdr/corba/exf/svnt_operation
    /// @copydoc hello1.idl::Hello::A::op_A
    void
    op_A (
        Hello::ExF::A_op_A_RequestHandler::ref_type) override;
    //@}

    // generated from exf4cc/templates/comp_exec/hdr/corba/exf/component_extra_public
    void _configuration_complete (
        const ::Components::ConfigValues& config);
  private:
    /// The facet executor for which this CORBA facet
    /// servant is handling the remote CORBA calls
    IDL::traits< ::Hello::B>::ref_type facet_executor_;

    // generated from exf4cc/templates/comp_exec/hdr/corba/exf/component_extra_private
    IDL::traits<CIAOX11::ExF::SchedulingLane>::ref_type scheduling_lane_ {};

    /// Member variables for ExF configuration
    CIAOX11::ExF::Deadline op_B_deadline_ {};
    CIAOX11::ExF::Priority op_B_priority_ {};

    CIAOX11::ExF::Deadline op_A_deadline_ {};
    CIAOX11::ExF::Priority op_A_priority_ {};

    /** @name Illegal to be called. Deleted explicitly to let the compiler detect any violation */
    //@{
    Hello_B_servant () = delete;
    Hello_B_servant (const Hello_B_servant&) = delete;
    Hello_B_servant (Hello_B_servant&&) = delete;
    Hello_B_servant& operator= (const Hello_B_servant& x) = delete;
    Hello_B_servant& operator= (Hello_B_servant&& x) = delete;
    //@}
  };


  // generated from corba4ccm/templates/comp_exec/hdr/corba/exf/facet_exec

  /// Executor implementation class for srr_facet facet
  class srr_facet_exec_i final
    : public IDL::traits< ::Hello::CCM_B>::base_type
  {
  public:
    // generated from corba4ccm/templates/comp_exec/hdr/corba/exf/facet_constructor
    /// Constructor
    explicit srr_facet_exec_i (
      IDL::traits< ::Hello_B_SRR::CCM_CORBA_Connector_Context>::ref_type context);

    /// Destructor
    ~srr_facet_exec_i () override = default;

    /// @name Operations from Hello_B_SRR::CORBA_Connector::srr_facet
    //@{

    // generated from corba4ccm/templates/comp_exec/hdr/corba/exf/operation
    /// @copydoc hello2.idl::Hello::B::op_B
    int32_t op_B (
        int32_t in_l,
        const ::Hello::S1& s_in_l) override;

    // generated from corba4ccm/templates/comp_exec/hdr/corba/exf/operation
    /// @copydoc hello1.idl::Hello::A::op_A
    int32_t op_A (
        int32_t in_l) override;
    //@}


  private:
    /// Context for component instance. Used for all middleware communication.
    IDL::traits< ::Hello_B_SRR::CCM_CORBA_Connector_Context>::ref_type context_;

    /** @name Illegal to be called. Deleted explicitly to let the compiler detect any violation */
    //@{
    srr_facet_exec_i () = delete;
    srr_facet_exec_i (const srr_facet_exec_i&) = delete;
    srr_facet_exec_i (srr_facet_exec_i&&) = delete;
    srr_facet_exec_i& operator= (const srr_facet_exec_i& x) = delete;
    srr_facet_exec_i& operator= (srr_facet_exec_i&& x) = delete;
    //@}
  };
} // namespace Hello_B_SRR_CORBA_Connector_Impl

extern "C" HELLO_CORBA_CC_EXEC_Export  void
create_Hello_B_SRR_CORBA_Connector_Impl (
  IDL::traits<Components::EnterpriseComponent>::ref_type& component);

// generated from corba4ccm/templates/comp_exec/hdr/corba/exf/component_post
#endif /* __RIDL_HELLO2_CC_EXEC_H_BHCHFCHE_INCLUDED__ */
