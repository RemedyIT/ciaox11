
// generated from <%= ridl_template_path %>
namespace PSDD
{
  template <>
  struct traits<<%= scoped_cxxtype %>>
    : public common_traits<<%= scoped_cxxtype %>>
  {
    static std::string get_type_name () { return "<%= scoped_cxxname %>"; }

    using key_only = std::true_type;
    using no_key = std::false_type;

    static
    bool append_key (
        IDL::traits<PSDataOut>::ref_type& d,
        <%= scoped_cxx_in_type %> datum)
    {
      return ::PSDD::traits<uint32_t>::append_key (d, static_cast<uint32_t> (datum));
    }

    static
    bool append_data (
        IDL::traits<PSDataOut>::ref_type& d,
        <%= scoped_cxx_in_type %> datum,
        bool provides_key)
    {
      return provides_key || ::PSDD::traits<uint32_t>::append_data (d, static_cast<uint32_t> (datum), false);
    }

    static
    bool extract_key (
        IDL::traits<PSDataIn>::ref_type& d,
        <%= scoped_cxx_out_type %> datum)
    {
      uint32_t ev {};
      if (::PSDD::traits<uint32_t>::extract_key (d, ev))
      {
        datum = static_cast<<%= scoped_cxxtype %>> (ev);
        return true;
      }
      return false;
    }

    static
    bool extract_data (
        IDL::traits<PSDataIn>::ref_type& d,
        <%= scoped_cxx_out_type %> datum,
        bool provides_key)
    {
      if (provides_key)
        return true;

      uint32_t ev {};
      if (::PSDD::traits<uint32_t>::extract_data (d, ev, false))
      {
        datum = static_cast<<%= scoped_cxxtype %>> (ev);
        return true;
      }
      return false;
    }
  };
} // PSDD
