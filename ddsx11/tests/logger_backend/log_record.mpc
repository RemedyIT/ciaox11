project (*idl) : ddsx11_ts_defaults, ridl_ostream_defaults {
  idlflags += -Wb,base_export_macro=LOG_RECORD \
              -Wb,base_export_include=log_record \
              -Gxhst \
              -o GeneratedCode -SS -Scdr -Scp
  custom_only = 1

  IDL_Files {
    gendir = GeneratedCode
    log_record.idl
  }
}

// Compile all C++11 stubs into one shared library
project (*stub) : ddsx11_stub {
  after += *idl

  dynamicflags += LOG_RECORD_STUB_BUILD_DLL

  Source_Files {
    GeneratedCode/log_recordC.cpp
    GeneratedCode/log_record_dds_typed_entitiesC.cpp
  }
}

project (*ddsx11_ndds_ts) : ddsx11_vendor_ts_defaults, ddsx11_no_idlfiles {
  after += *idl
  requires += ndds
  NDDSTypeSupport_Files {
    gendir = GeneratedCode
    GeneratedCode/log_record_dds.idl
  }
  custom_only=1
}

project (*ddsx11_opendds_ts) : ddsx11_vendor_ts_defaults, ddsx11_no_idlfiles {
  after += *idl
  requires += opendds
  idlflags += -o GeneratedCode -I. -IGeneratedCode -SS \
              -Wb,stub_export_macro=LOG_RECORD_TYPESUPPORT_Export \
              -Wb,stub_export_include=log_record_typesupport_export.h
  TypeSupport_Files {
    gendir = GeneratedCode
    GeneratedCode/log_record_dds.idl
    dcps_ts_flags += -Wb,export_macro=LOG_RECORD_TYPESUPPORT_Export \
                     -Wb,export_include=log_record_typesupport_export.h \
                     -o GeneratedCode
  }
  IDL_Files {
    gendir = GeneratedCode
    GeneratedCode/log_record_dds.idl
  }
  custom_only=1
}

project (*ddsx11_ndds_impl) : ddsx11_impl {
  after += *stub *ddsx11_ndds_ts
  libs += *stub
  requires += ndds
  sharedname = log_record_ddsx11_impl

  dynamicflags += LOG_RECORD_TYPESUPPORT_BUILD_DLL

  Source_Files {
    GeneratedCode/log_record_dds.cxx
    GeneratedCode/log_record_ddsPlugin.cxx
    GeneratedCode/log_record_ddsSupport.cxx
    GeneratedCode/log_record_dds_typesupport.cpp
  }

  Header_Files {
    GeneratedCode/log_record_dds.h
    GeneratedCode/log_record_ddsPlugin.h
    GeneratedCode/log_record_ddsSupport.h
    GeneratedCode/log_record_dds_typesupport.h
  }
}

project (*ddsx11_opendds_impl) : ddsx11_impl, ddsx11_no_idlfiles {
  after += *stub *ddsx11_opendds_ts
  libs += *stub
  requires += opendds
  sharedname = log_record_ddsx11_impl

  dynamicflags += LOG_RECORD_TYPESUPPORT_BUILD_DLL

  Source_Files {
    GeneratedCode/log_record_ddsC.cpp
    GeneratedCode/log_record_ddsTypeSupportC.cpp
    GeneratedCode/log_record_ddsTypeSupportImpl.cpp
    GeneratedCode/log_record_dds_typesupport.cpp
  }

  Header_Files {
    GeneratedCode/log_record_ddsC.h
    GeneratedCode/log_record_ddsTypeSupportC.h
    GeneratedCode/log_record_ddsTypeSupportImpl.
    GeneratedCode/log_record_dds_typesupport.h
  }
}

project(*ddsx11_logger) : ddsx11_impl, ddsx11_logger, ddsx11_no_idlfiles {
  dynamicflags += DNCX11_LOG_BACKEND_BUILD_DLL
  after += log_record_stub log_record_ddsx11_opendds_impl log_record_ddsx11_ndds_impl
  libs  += log_record_stub log_record_ddsx11_impl

  includes += GeneratedCode

  Source_Files {
    log_backend.cpp
  }

  Header_Files {
  }
}

project(*log_server) : ddsx11_impl, ddsx11_no_idlfiles {
  after += log_record_stub log_record_ddsx11_opendds_impl log_record_ddsx11_ndds_impl
  libs  += log_record_stub log_record_ddsx11_impl

  exename = log_server

  includes += GeneratedCode

  Source_Files {
    log_server.cpp
  }

  Header_Files {
  }
}
