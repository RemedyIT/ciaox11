# this plan is made for using asynchronous simplex and multiplex connections between Sender and AMI-connectors,
# and for using synchronous multiplex connections between Sender and Receivers
# We have 4 Receivers, 1 Sender and 4 AMI4CCM connectors

#=====================================================
# Definitions for Receiver Node
#-----------------------------------------------------

# ReceiverComponent instances and their CORBA connectors

# Receiver component A and its CORBA connector
nl.remedy.it.CCM.Component Hello_ReceiverComponentA uses_s_m_receiver_exec create_UsesSM_Receiver_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_Receiver_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
nl.remedy.it.CCM.Component Receiver_CORBA_connectorA uses_s_m_corba_conn create_UsesSM_One_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_One_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
    nl.remedy.it.DnCX11.Connection Hello_ReceiverComponentA
      srr_receptacle < do_my_one

# Receiver component B and its CORBA connector
nl.remedy.it.CCM.Component Hello_ReceiverComponentB uses_s_m_receiver_exec create_UsesSM_Receiver_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_Receiver_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
nl.remedy.it.CCM.Component Receiver_CORBA_connectorB uses_s_m_corba_conn create_UsesSM_One_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_One_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
    nl.remedy.it.DnCX11.Connection Hello_ReceiverComponentB
      srr_receptacle < do_my_one

# Receiver component C and its CORBA connector
nl.remedy.it.CCM.Component Hello_ReceiverComponentC uses_s_m_receiver_exec create_UsesSM_Receiver_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_Receiver_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
nl.remedy.it.CCM.Component Receiver_CORBA_connectorC uses_s_m_corba_conn create_UsesSM_One_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_One_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
    nl.remedy.it.DnCX11.Connection Hello_ReceiverComponentC
      srr_receptacle < do_my_one

# Receiver component D and its CORBA connector
nl.remedy.it.CCM.Component Hello_ReceiverComponentD uses_s_m_receiver_exec create_UsesSM_Receiver_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_Receiver_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
nl.remedy.it.CCM.Component Receiver_CORBA_connectorD uses_s_m_corba_conn create_UsesSM_Two_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_Two_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
    nl.remedy.it.DnCX11.Connection Hello_ReceiverComponentD
      srr_receptacle < do_my_two


#=====================================================
# Definitions for Sender Node
#-----------------------------------------------------

# SenderComponent instance
nl.remedy.it.CCM.Component Hello_SenderComponent uses_s_m_sender_exec create_UsesSM_Sender_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_Sender_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Sender_CORBA_connectorA
      m_run_my_one < srr_facet
    nl.remedy.it.DnCX11.Connection Sender_CORBA_connectorB
      m_run_my_one < srr_facet
    nl.remedy.it.DnCX11.Connection Sender_CORBA_connectorC
      m_run_my_one < srr_facet


# The CORBA connectors of the Sender, providing the synchronous ports between Sender and Receiver
nl.remedy.it.CCM.Component Sender_CORBA_connectorA uses_s_m_corba_conn create_UsesSM_One_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_One_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connectorA
      srr_receptacle < srr_facet
nl.remedy.it.CCM.Component Sender_CORBA_connectorB uses_s_m_corba_conn create_UsesSM_One_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_One_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connectorB
      srr_receptacle < srr_facet
nl.remedy.it.CCM.Component Sender_CORBA_connectorC uses_s_m_corba_conn create_UsesSM_One_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_One_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connectorC
      srr_receptacle < srr_facet

# AMI ConnectorComponent instance A
nl.remedy.it.CCM.Component AMI_ConnectorComponentA uses_s_m_amic_conn create_UsesSM_AMI4CCM_One_Connector_AMI4CCM_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_AMI4CCM_One_Connector_AMI4CCM_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    # the asynchronous port for the Sender component and the synchronous port between connector and receiver
    # for multiplex  m_run_my_one connection
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      ami4ccm_port_ami4ccm_provides > sendc_m_run_my_one    # run_asynch_m_run_my_one_connection
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connectorA
      ami4ccm_port_ami4ccm_uses < srr_facet # do_one_connection

# AMI ConnectorComponent instance B
nl.remedy.it.CCM.Component AMI_ConnectorComponentB uses_s_m_amic_conn create_UsesSM_AMI4CCM_One_Connector_AMI4CCM_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_AMI4CCM_One_Connector_AMI4CCM_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    # the asynchronous port for the Sender component and the synchronous port between connector and receiver
    # for multiplex  m_run_my_one connection
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      ami4ccm_port_ami4ccm_provides > sendc_m_run_my_one    # run_asynch_m_run_my_one_connection
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connectorB
      ami4ccm_port_ami4ccm_uses < srr_facet # do_one_connection

# AMI ConnectorComponent instance C
nl.remedy.it.CCM.Component AMI_ConnectorComponentC uses_s_m_amic_conn create_UsesSM_AMI4CCM_One_Connector_AMI4CCM_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_AMI4CCM_One_Connector_AMI4CCM_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    # the asynchronous port for the Sender component and the synchronous port between connector and receiver
    # for multiplex  m_run_my_one connection
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      ami4ccm_port_ami4ccm_provides > sendc_m_run_my_one    # run_asynch_m_run_my_one_connection
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connectorC
      ami4ccm_port_ami4ccm_uses < srr_facet # do_one_connection

# AMI ConnectorComponent instance D
nl.remedy.it.CCM.Component AMI_ConnectorComponentD uses_s_m_amic_conn create_UsesSM_AMI4CCM_Two_Connector_AMI4CCM_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_UsesSM_AMI4CCM_Two_Connector_AMI4CCM_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    # the asynchronous port for the Sender component and the synchronous port between connector and receiver
    # for simplex  s_run_my_two connection
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      ami4ccm_port_ami4ccm_provides > sendc_s_run_my_two    # run_asynch_s_run_my_two_connection
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connectorD
      ami4ccm_port_ami4ccm_uses < srr_facet # do_two_connection
