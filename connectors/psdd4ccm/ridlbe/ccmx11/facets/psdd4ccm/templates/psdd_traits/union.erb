
// generated from <%= ridl_template_path %>
namespace PSDD
{
  template <>
  struct traits<<%= scoped_cxxtype %>>
    : public common_traits<<%= scoped_cxxtype %>>
  {
    static std::string get_type_name () { return "<%= scoped_cxxname %>"; }

    using key_only = std::false_type;
    using no_key = std::false_type;

    static
    bool append_key (
        IDL::traits<PSDataOut>::ref_type& d,
        <%= scoped_cxx_in_type %> datum)
    {
      return ::PSDD::traits<<%= scoped_switch_cxxtype %>>::append_key (d, datum._d ());
    }

    static
    bool append_data (
        IDL::traits<PSDataOut>::ref_type& d,
        <%= scoped_cxx_in_type %> datum,
        bool provides_key)
    {
      if (provides_key || ::PSDD::traits<<%= scoped_switch_cxxtype %>>::append_data (d, datum._d (), false))
      {
        switch (datum._d ())
        {
% members.each do |_m|
%   if _m.is_default?
          default:
%   else
%     _m.nondefault_labels.each do |_l|
          case <%= _l %>:
%     end
%   end
            return ::PSDD::traits<<%= _m.scoped_cxxtype %>>::append_data (d, datum.<%= _m.cxxname %> (), false);
          break;
% end
        }
      }
      return false;
    }

    static
    bool extract_key (
        IDL::traits<PSDataIn>::ref_type& d,
        <%= scoped_cxx_out_type %> datum)
    {
      <%= scoped_switch_cxxtype %> tmp_disc {};
      if (::PSDD::traits<<%= scoped_switch_cxxtype %>>::extract_key (d, tmp_disc))
      {
        switch (tmp_disc)
        {
% members.each do |_m|
%   unless _m.is_default?
%     _m.nondefault_labels.each do |_l|
          case <%= _l %>:
%     end
          {
            // initialize associated default value
            <%= _m.scoped_cxxtype %> tmp_val<%= _m.value_initializer %>;
            // set union member<% if _m.has_multiple_discriminators? %> and associated discriminant because there are multiple legal discriminant values<% end %>
            datum.<%= _m.cxxname %> (std::move (tmp_val)<% if _m.has_multiple_discriminators? %>, tmp_disc<% end %>);
            return true;
          }
          break;
%   end
% end
% if needs_switch_default?
          default:
%   if has_default?
%     _m_def = default_member
          {
            // initialize associated default value
            <%= _m_def.cxx_member_type %> tmp_val<%= _m_def.value_initializer %>;
            // set union member<% if _m_def.has_multiple_discriminators? %> and associated discriminant because there are multiple legal discriminant values<% end %>
            datum.<%= _m_def.cxxname %> (std::move (tmp_val)<% if _m_def.has_multiple_discriminators? %>, tmp_disc<% end %>);
            return true;
          }
%   end
          break;
% end
        }
      }
      return false;
    }

    static
    bool extract_data (
        IDL::traits<PSDataIn>::ref_type& d,
        <%= scoped_cxx_out_type %> datum,
        bool provides_key)
    {
      <%= scoped_switch_cxxtype %> tmp_disc { datum._d () };
      if (provides_key || ::PSDD::traits<<%= scoped_switch_cxxtype %>>::extract_data (d, tmp_disc, false))
      {
        switch (tmp_disc)
        {
% members.each do |_m|
%   unless _m.is_default?
%     _m.nondefault_labels.each do |_l|
          case <%= _l %>:
%     end
          {
            // initialize associated default value
            <%= _m.scoped_cxxtype %> tmp_val<%= _m.value_initializer %>;
            // extract
            if (::PSDD::traits<<%= _m.scoped_cxxtype %>>::extract_data (d, tmp_val, false))
            {
              // set union member<% if _m.has_multiple_discriminators? %> and associated discriminant because there are multiple legal discriminant values<% end %>
              datum.<%= _m.cxxname %> (std::move (tmp_val)<% if _m.has_multiple_discriminators? %>, tmp_disc<% end %>);
              return true;
            }
          }
          break;
%   end
% end
% if needs_switch_default?
          default:
%   if has_default?
%     _m_def = default_member
          {
            // initialize associated default value
            <%= _m_def.cxx_member_type %> tmp_val<%= _m_def.value_initializer %>;
            // extract
            if (::PSDD::traits<<%= _m_def.scoped_cxxtype %>>::extract_data (d, tmp_val, false))
            {
              // set union member<% if _m_def.has_multiple_discriminators? %> and associated discriminant because there are multiple legal discriminant values<% end %>
              datum.<%= _m_def.cxxname %> (std::move (tmp_val)<% if _m_def.has_multiple_discriminators? %>, tmp_disc<% end %>);
              return true;
            }
          }
%   end
          break;
% end
        }
      }
      return false;
    }
  };
} // PSDD
