project (*idl) : ddsx11_ts_defaults, ridl_ostream_defaults {
  idlflags += -Wb,base_export_macro=SHAPES \
              -Wb,base_export_include=shapes \
              -Gxhst \
              -o GeneratedCode -SS -Scdr -Scp
  custom_only = 1

  IDL_Files {
    gendir = GeneratedCode
    shapetype.idl
  }
}

// Compile all C++11 stubs into one shared library
project (*stub) : ddsx11_stub {
  after += *idl
  libout = ../lib

  dynamicflags += SHAPES_STUB_BUILD_DLL

  Source_Files {
    GeneratedCode/shapetypeC.cpp
    GeneratedCode/shapetype_dds_typed_entitiesC.cpp
  }
}

project (*ddsx11_ndds_ts) : ddsx11_vendor_ts_defaults {
  after += *idl
  requires += ndds
  NDDSTypeSupport_Files {
    gendir = GeneratedCode
    GeneratedCode/shapetype_dds.idl
  }
  custom_only=1
}

project (*ddsx11_opendds_ts) : ddsx11_vendor_ts_defaults, ddsx11_no_idlfiles {
  after += *idl
  requires += opendds
  idlflags += -o GeneratedCode -I. -IGeneratedCode -SS
  TypeSupport_Files {
    gendir = GeneratedCode
    GeneratedCode/shapetype_dds.idl
    dcps_ts_flags += -Wb,export_macro=SHAPES_STUB_Export \
                     -Wb,export_include=shapes_stub_export.h
  }
  IDL_Files {
    gendir = GeneratedCode
    GeneratedCode/shapetype_dds.idl
    idlflags += -Wb,stub_export_macro=SHAPES_STUB_Export \
                -Wb,stub_export_include=shapes_stub_export.h \
                -SS
  }
  custom_only=1
}

project (*ddsx11_ndds_impl) : ddsx11_impl {
  after += *stub *ddsx11_ndds_ts
  libs += *stub
  requires += ndds
  sharedname = builtin_ddsx11_impl

  dynamicflags += SHAPES_TYPESUPPORT_BUILD_DLL

  libout    = ../lib
  libpaths += ../lib

  Source_Files {
    GeneratedCode/shapetype_dds.cxx
    GeneratedCode/shapetype_ddsPlugin.cxx
    GeneratedCode/shapetype_ddsSupport.cxx
    GeneratedCode/shapetype_dds_typesupport.cpp
  }

  Header_Files {
    GeneratedCode/shapetype_dds.h
    GeneratedCode/shapetype_ddsPlugin.h
    GeneratedCode/shapetype_ddsSupport.h
    GeneratedCode/shapetype_dds_typesupport.h
  }
}

project (*ddsx11_opendds_impl) : ddsx11_impl, ddsx11_no_idlfiles {
  after += *stub *ddsx11_opendds_ts
  libs += *stub
  requires += opendds
  sharedname = builtin_ddsx11_impl

  dynamicflags += SHAPES_TYPESUPPORT_BUILD_DLL

  libout    = ../lib
  libpaths += ../lib

  Source_Files {
    GeneratedCode/shapetype_ddsC.cpp
    GeneratedCode/shapetype_ddsTypeSupportC.cpp
    GeneratedCode/shapetype_ddsTypeSupportImpl.cpp
    GeneratedCode/shapetype_dds_typesupport.cpp
  }

  Header_Files {
    GeneratedCode/shapetype_ddsC.h
    GeneratedCode/shapetype_ddsTypeSupportC.h
    GeneratedCode/shapetype_ddsTypeSupportImpl.h
    GeneratedCode/shapetype_dds_typesupport.h
  }
}
