==== CORBA4CCM

Description::
CORBA4CCM connectors are derived from user defined IDL interface definitions. Connectors are built from
standardized stub and skeleton code generated from the user defined IDL. See the
<<{xref_docs_root}/corba4ccm/corba4ccm_details#,CORBA4CCM>> documentation for the common details
regarding the implementation of the these connectors.
The implementation of ExF enabled CORBA4CCM connectors requires the generation of tailored skeleton code as well as
tailored executor and servant code.
Stub code generation is not affected.

Implementation::
To implement ExF enabled CORBA4CCM connectors code needs to be generated using the following RIDL switch combinations. +
+
[width="100%",cols="<20%a,<50%a,<30%a",options="header",]
|=======================================================================
|Switches|Description|MPC base project(s)

|`-GExF`
|This switch added to a commandline for regular skeleton generation will generate ExF enabled skeleton code.
|`ciaox11_exf_idl`

|`-GExF`
|This switch added to a commandline for regular CORBA4CCM connector  generation will generate an ExF enabled connector
executor and servant code.
|`ciaox11_exf_idl`
|=======================================================================
+
Compiling and linking the ExF enabled code requires additional libraries as follows. +
+
[width="100%",cols="<30%a,<40%a,<30%a",options="header",]
|=======================================================================
|Libraries|Description|MPC base project(s)

|`ciaox11_exf_core` +
`ciaox11_exf_amh_base` +
`TAO_Messaging` +
`TAO_PI`
|Required for compiling and linking ExF enabled skeletons as well as the connector executor
and servant.
|`ciaox11_exf_amh`
|=======================================================================

Deployment::
Deployment is similar to deployment of regular CORBA4CCM connectors. The only requirement is that the connector and
the user component it is to be connected to are being deployed in an ExF enabled locality and container. See
<<axcioma_exf#_deploying_with_exf,here>> for more details.
