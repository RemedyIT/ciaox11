# This plan makes sure that the synchronous interface between the sender
# and receiver is running via the AMI4CCM connector of the Sender and the
# CORBA connector of the Receiver. This plan uses the synchronous port on
# the AMI connector.
# See plan_comp_sync.config for a configuration that uses a separate
# CORBA connector on the Sender side for the request/reply interaction
# between sender and receiver


#=====================================================
# Definitions for Receiver Node
#-----------------------------------------------------

# ReceiverComponent instance
nl.remedy.it.CCM.Component Hello_ReceiverComponent hello_simple_r_exec create_Hello_Receiver_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_Receiver_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"

# Receiver CORBA Connector instance
nl.remedy.it.CCM.Component Receiver_CORBA_connector hello_simple_corba_conn create_Hello_MyFoo_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_MyFoo_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
    nl.remedy.it.DnCX11.Connection Hello_ReceiverComponent
      srr_receptacle < do_my_foo

#=====================================================
# Definitions for Sender Node
#-----------------------------------------------------

# SenderComponent instance
nl.remedy.it.CCM.Component Hello_SenderComponent hello_simple_s_exec create_Hello_Sender_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_Sender_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"

# NO CORBA Connector on the sender side since the AMI4CCM connector implicitly uses CORBA.
# Since it's tightly coupled to CORBA, request/reply pattern on the receiver side should
# always be a CORBA connector.

# AMI ConnectorComponent instance
nl.remedy.it.CCM.Component AMI_ConnectorComponent hello_simple_ami4ccm_conn create_Hello_AMI4CCM_MyFoo_Connector_AMI4CCM_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_AMI4CCM_MyFoo_Connector_AMI4CCM_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      ami4ccm_port_ami4ccm_provides > sendc_run_my_foo    # run_asynch_foo_connection
      ami4ccm_port_ami4ccm_sync_provides > run_my_foo
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connector
      ami4ccm_port_ami4ccm_uses < srr_facet
