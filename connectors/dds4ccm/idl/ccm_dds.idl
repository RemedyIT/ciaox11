/**
* @file    ccm_dds.idl
* @author  Marijke Hengstmengel
*
* @brief   idl file for dds4ccm
*
* @copyright Copyright (c) Remedy IT Expertise BV
*/

#ifndef CCM_DDS_BASE_IDL
#define CCM_DDS_BASE_IDL

#include <Components.idl>
#include "connectors/dds4ccm/idl/dds4ccm_data_listener_control.idl"

#if defined (CIAOX11_DDS4CCM_STATE)
#include "connectors/dds4ccm/idl/dds4ccm_state_listener_control.idl"
#endif

#include "connectors/dds4ccm/idl/dds4ccm_port_status_listener.idl"
#include "connectors/dds4ccm/idl/dds4ccm_connector_status_listener.idl"
#include "connectors/dds4ccm/idl/dds4ccm_connector.idl"

#if defined (CIAOX11_DDS4CCM_EVENT)
#pragma axcioma impl "connectors/dds4ccm/impl/dds4ccm_event_connector_t.h"
#endif

#if defined (CIAOX11_DDS4CCM_STATE)
#pragma axcioma impl "connectors/dds4ccm/impl/dds4ccm_state_connector_t.h"
#endif

module CCM_DDS
{
  // Gathers all the constructs that are dependent on the data type (T),
  // either directly -- interfaces making use of T or TSeq,
  // or indirectly -- porttypes using or providing those interfaces.
  // TSeq is passed as a second parameter to avoid creating a new sequence type.
  module Typed <typename T, sequence<T> TSeq> {

    // -------------------------------------
    // Interfaces to be 'used' or 'provided'
    // -------------------------------------

    // Data access - publishing side
    // -----------------------------

    /**
     * InstanceHandle Manager
     */
    local interface InstanceHandleManager {
      DDS::InstanceHandle_t register_instance (in T datum)
        raises (InternalError);
      void unregister_instance (in T datum, in DDS::InstanceHandle_t instance_handle)
        raises (InternalError);
    };

#if defined (CIAOX11_DDS4CCM_EVENT)
    /**
     * When the instance lifecycle is not a concern.
     * The DDS instance handle is exactly managed as by DDS (cf. DDS spec for more details)
     */
    local interface Writer : InstanceHandleManager {
      void write_one (in T datum, in DDS::InstanceHandle_t instance_handle)
        raises (InternalError);
      /// Attempt to write_many is stopped at the first error
      /// If is_coherent_write==true, DDS write orders issued by a write_many are
      /// placed between begin/end coherent updates (even if an error occurs)
      void write_many (in TSeq data)
        raises (InternalError);
      /// false by default
      attribute boolean is_coherent_write;
    };
#endif

#if defined (CIAOX11_DDS4CCM_STATE)
    /**
     * When the instance lifecycle is a concern
     * The DDS instance handle is exactly managed as by DDS (cf. DDS spec for more details)
     *
     * The exceptions AlreadyCreated or NonExistent are raised at least if a local
     * conflict exists; in addition if is_global_scope is true, the test on
     * existence attempts to take into account the instances created outside
     * @note This check requires to previously attempt to read (not free)
     * @note This check is not 100% guaranteed as a creation or a deletion
     *        may occur in the short time between the check and the DDS order
     * For create_many(), update_many(), and delete_many() operations:
     * - global check is performed before actual write or dispose
     *   (in case of error, all the erroneous instances are reported
     *    in the exception)
     * - attempt to DDS write or dispose is stopped at the first error
     *- if is_coherent_write==true, DDS orders resulting from a *_many operation
     *  are placed between begin/end coherent updates (even if an error occurs)
     */
    local interface Updater : InstanceHandleManager {
      void create_one (in T datum)
        raises (AlreadyCreated, InternalError);
      void update_one (in T datum, in DDS::InstanceHandle_t instance_handle)
        raises (NonExistent, InternalError);
      void delete_one (in T datum,in DDS::InstanceHandle_t instance_handle)
        raises (NonExistent, InternalError);
      void create_many (in TSeq data)
        raises (AlreadyCreated, InternalError);
      void update_many (in TSeq data)
        raises (NonExistent, InternalError);
      void delete_many (in TSeq data)
        raises (NonExistent, InternalError);

      /// false by default
      readonly attribute boolean is_global_scope;
      /// false by default
      attribute boolean is_coherent_write;

    };
#endif

    // Data access - subscribing side
    // ------------------------------

    /**
     * Access to the available data (no wait)
     *
     * All read operations are performed with the following parameters
     * - DDS::READ_SAMPLE_STATE or DDS::NOT_READ_SAMPLE_STATE
     * - DDS::NEW_VIEW_STATE or DDS::NOT_NEW_VIEW_STATE
     * - DDS::ALIVE_INSTANCE_STATE
     * - Through the query as specified in the expression ("" means no query)
     */
    local interface Reader {
      /// Returns for each living instance, its last sample
      void read_last (inout TSeq data, inout ReadInfoSeq infos)
        raises (InternalError);
      /// Returns all the samples of all instances
      /// ordered by instance first and then by sample
      void read_all (inout TSeq data, inout ReadInfoSeq infos)
        raises (InternalError);
      /// Returns the last sample of the given instance
      /// Uses the @a instance_handle the same way the Writer or Updater *_one operations do
      void read_one_last (inout T datum, out ReadInfo info, in DDS::InstanceHandle_t instance_handle)
        raises (NonExistent, InternalError);
      /// Returns all the samples for the given instance
      /// Uses the @a instance_handle the same way the Writer or Updater *_one operations do
      void read_one_all (in T datum, inout TSeq data, inout ReadInfoSeq infos, in DDS::InstanceHandle_t instance_handle)
        raises (NonExistent, InternalError);
      attribute QueryFilter query
        setraises (InternalError);
    };

    /**
     * To get new data (and wait for)
     *
     * All get operations are performed to DDS with the following parameters
     * - DDS::NOT_READ_SAMPLE_STATE
     * - DDS::NEW_VIEW_STATE or DDS::NOT_NEW_VIEW_STATE
     * - DDS::ALIVE_INSTANCE_STATE or DDS::NOT_ALIVE_INSTANCE_STATE
     * - Through the query as specified in the associated Reader
     * - Within the time limit specified in time_out
     */
    local interface Getter {
      /// Returns each read sample one by one
      ///  @retval true data is provided
      /// @retval false time-out occurred
      boolean get_one (out T datum, out ReadInfo info)
        raises (InternalError);
      /// Returns all available samples within the max_delivered_data limit
      ///  @retval true data is provided
      /// @retval false time-out occurred
      boolean get_many (inout TSeq data, inout ReadInfoSeq infos)
        raises (InternalError);
      /// Time limit specified used for all get operations
      attribute DDS::Duration_t       time_out;
      /// Default 0 (no limit)
      attribute DataNumber_t          max_delivered_data;
    };

    /**
     * Similar to a Getter but in push mode
     */
    local interface Listener {
      /**
       * on_one_data() is triggered when the mode of the associated listener control
       * is ONE_BY_ONE (then similar to a get_one(), except that in push mode
       * instead of pull mode)
       *
       * A query filter (if any) in the associated Reader is used.
       */
      void on_one_data (in T datum, in ReadInfo info);
      /**
       * on_many_data() is triggered when the listener mode is MANY_BY_MANY (then
       * similar to get_many() but in push mode)
       *
       * A query filter (if any) in the associated Reader is used.
       */
      void on_many_data (in TSeq data, in ReadInfoSeq infos);
    };

#if defined (CIAOX11_DDS4CCM_STATE)
    /**
     * Listener to be notified based on the instance lifecycle
     *
     * No operations are triggered if the mode of the associated listener
     * control is NOT_ENABLED
     */
    local interface StateListener {
      /**
       * on_creation() is triggered if the instance is considered as new in the
       * component scope; note that in case there is a filter and the attribute
       * is_filter_interpreted of the listener control is true, this gathers also
       * the case when the instance is filtered-in.
       *
       * A query filter (if any) in the associated Reader is used.
       */
      void on_creation (in T datum, in ReadInfo info);
      /**
       * on_one_update() is triggered if neither on_creation() nor on_deletion()
       * are triggered and the mode of the associated listener control is
       * ONE_BY_ONE
       *
       * A query filter (if any) in the associated Reader is used.
       */
      void on_one_update (in T datum, in ReadInfo info);
      /**
       * on_many_updates()is triggered if neither on_creation() nor on_deletion()
       * are triggered and the mode of the associated listener control is
       * MANY_BY_MANY; the number of returned samples is within the limits of
       * max_delivered_data attribute of the associated listener control.
       *
       * A query filter (if any) in the associated Reader is used.
       */
      void on_many_updates (in TSeq data, in ReadInfoSeq infos);
      /**
       * on_deletion() is triggered if the instance is no more existing; note
       * that in case there is a filter  and the attribute
       * is_filter_interpreted of the listener control is true, this gathers
       * also the case when the instance is filtered-out
       *
       * A query filter (if any) in the associated Reader is used.
       */
      void on_deletion (in T datum, in ReadInfo info);
    };
#endif

    // ---------
    // DDS Ports
    // ---------

#if defined (CIAOX11_DDS4CCM_EVENT)
    porttype DDS_Write {
      uses Writer              data;
      uses DDS::DataWriter     dds_entity;
    };
#endif

#if defined (CIAOX11_DDS4CCM_STATE)
    porttype DDS_Update {
      uses Updater                    data;
      uses DDS::DataWriter            dds_entity;
    };
#endif

#if defined (CIAOX11_DDS4CCM_STATE)
    porttype DDS_Read {
      uses Reader                     data;
      uses DDS::DataReader            dds_entity;
      provides PortStatusListener     status;
      attribute QueryFilter           filter setraises (NonChangeable);
      uses ContentFilterSetting       filter_config;
    };
#endif

    porttype DDS_Get {
      uses Reader                     data;
      uses Getter                     fresh_data;
      uses DDS::DataReader            dds_entity;
      provides PortStatusListener     status;
      attribute QueryFilter           filter setraises (NonChangeable);
      uses ContentFilterSetting       filter_config;
    };

    porttype DDS_Listen {
      uses Reader                     data;
      uses DataListenerControl        data_control;
      provides Listener               data_listener;
      uses DDS::DataReader            dds_entity;
      provides PortStatusListener     status;
      attribute QueryFilter           filter setraises (NonChangeable);
      uses ContentFilterSetting       filter_config;
    };

#if defined (CIAOX11_DDS4CCM_STATE)
    porttype DDS_StateListen {
      uses Reader                     data;
      uses StateListenerControl       data_control;
      provides StateListener          data_listener;
      uses DDS::DataReader            dds_entity;
      provides PortStatusListener     status;
      attribute QueryFilter           filter setraises (NonChangeable);
      uses ContentFilterSetting       filter_config;
    };
#endif

    // ----------------------------
    // Connectors
    // (Correspond to DDS patterns)
    // ----------------------------
#if defined (CIAOX11_DDS4CCM_STATE)
    connector DDS_State : DDS_TopicBase {
      mirrorport DDS_Update           observable;
      mirrorport DDS_Read             passive_observer;
      mirrorport DDS_Get              pull_observer;
      mirrorport DDS_Listen           push_observer;
      mirrorport DDS_StateListen      push_state_observer;
    };
#endif

#if defined (CIAOX11_DDS4CCM_EVENT)
    connector DDS_Event : DDS_TopicBase {
      mirrorport DDS_Write            supplier;
      mirrorport DDS_Get              pull_consumer;
      mirrorport DDS_Listen           push_consumer;
    };
#endif

    }; // Module Typed
}; // Module CCM_DDS

#endif

