
// generated from <%= ridl_template_path %>
bool
<%= lem_name %>_Context::set_connection (
  const std::string& name,
  IDL::traits<CORBA::Object>::ref_type connection,
%   if all_incl_multiple_port?
  const std::string& conn_name,
%   end
  const ::Components::ConfigValues& config)
{
%   nr_ports = 0
%   all_ports.each do |_p|
%     if _p.port_type == :receptacle
%       nr_ports +=1
%       if nr_ports == 1
  if (name == "<%= _p.lem_name %>")
%       else
  else if (name == "<%= _p.lem_name %>")
%       end
  {
%       if _p.is_multiple?
    IDL::traits<<%= _p.interface_type.scoped_cxxname %>>::ref_type c_ = IDL::traits<<%= _p.interface_type.scoped_cxxname %>>::narrow (std::move(connection));

    {
      std::lock_guard<std::mutex> lock (this->context_tbl_lock_);

      this-><%= _p.lem_name %>_context_tbl_.insert (
        <%= _p.interface_type.scoped_cxxname.upcase.identify %>_CONTEXT_TABLE::value_type (conn_name, std::move(c_)));
    }
%       else
    this-><%= _p.cxxname %>_ = IDL::traits<<%= _p.interface_type.scoped_cxxname %>>::narrow (std::move(connection));
%       end
% nest (2) { visit_template('context_port_set_connection', {:port => _p}) }
  }
%     end
%   end
% nest (1) { visit_context_extra_connect }
  else
  {
    return false;
  }
  return true;
}
