# this plan is made for using the synchronous connection between Sender and AMI4CCM connector,
# it is also possible using  the synchronous connection between Sender and Receiver, via the
# CORBA connectors if the first connection is disabled and the last is enabled

#=====================================================
# Definitions for Receiver Node
#-----------------------------------------------------

# ReceiverComponent instance
nl.remedy.it.CCM.Component Hello_ReceiverComponent Hello_Receiver_exec create_Hello_Receiver_comp_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_Receiver_comp_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"

# Receiver CORBA Connector instance
nl.remedy.it.CCM.Component Receiver_CORBA_connector Hello_corba_conn create_Hello_MyFoo_obj_SRR_CORBA_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_MyFoo_obj_SRR_CORBA_Connector_Servant"
    nl.remedy.it.DnCX11.Node "ReceiverNode"
    nl.remedy.it.DnCX11.Locality "ReceiverLocality"
    nl.remedy.it.DnCX11.Connection Hello_ReceiverComponent
      srr_receptacle < do_my_foo


#=====================================================
# Definitions for Sender Node
#-----------------------------------------------------

# SenderComponent instance
nl.remedy.it.CCM.Component Hello_SenderComponent Hello_Sender_exec create_Hello_Sender_comp_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_Sender_comp_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    # It is in this test possible to use either the synchronous connection 'synch_foo_connection'
    # between Sender and Receiver or the 'synch_foo_connection' between Sender and AMI connector,
    # one of the two must be enabled, the other disabled.
    # See the plans in the AMI4CCM hello_simple example for more details.

    # synchronous connection between Sender and Receiver
    #    nl.remedy.it.DnCX11.Connection Sender_CORBA_connector
    #      run_my_foo < srr_facet                            # synch_foo_connection

    # the synchronous port on the AMI connector
    nl.remedy.it.DnCX11.Connection Hello_AMIConnector
        run_my_foo < ami4ccm_port_ami4ccm_sync_provides     # synch_foo_connection

# This should be enabled when the synchronous connection between Sender and Receiver
# does not use the AMI connector.
# nl.remedy.it.CCM.Component Sender_CORBA_connector Hello_corba_conn create_Hello_MyFoo_obj_SRR_CORBA_Connector_Impl
#     nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_MyFoo_obj_SRR_CORBA_Connector_Servant"
#     nl.remedy.it.DnCX11.Node "SenderNode"
#     nl.remedy.it.DnCX11.Locality "SenderLocality"
#     nl.remedy.it.DnCX11.Connection Receiver_CORBA_connector
#       srr_receptacle < srr_facet

# AMI ConnectorComponent instance
nl.remedy.it.CCM.Component Hello_AMIConnector Hello_ami4ccm_conn create_Hello_AMI4CCM_MyFoo_obj_Connector_AMI4CCM_Connector_Impl
    nl.remedy.it.DnCX11.ExecParameter nl.remedy.it.DnCX11.Servant.Factory "create_Hello_AMI4CCM_MyFoo_obj_Connector_AMI4CCM_Connector_Servant"
    nl.remedy.it.DnCX11.Node "SenderNode"
    nl.remedy.it.DnCX11.Locality "SenderLocality"
    nl.remedy.it.DnCX11.Connection Hello_SenderComponent
      ami4ccm_port_ami4ccm_provides > sendc_run_my_foo    # run_asynch_foo_connection
    nl.remedy.it.DnCX11.Connection Receiver_CORBA_connector
      ami4ccm_port_ami4ccm_uses < srr_facet               # do_foo_connection
