tag::connectorkind[]
* `_:psdd4ccm_` +
for publish subscribe interaction
end::connectorkind[]

tag::porttypelist[]
* `:psdd4ccm`
end::porttypelist[]

tag::pubsubporttype[]
[footnote]#xref:psdd4ccm-comp-port-publishes[icon:caret-right[]{nbsp}{nbsp}publishes]# +
[footnote]#xref:psdd4ccm-comp-port-subscribes[icon:caret-right[]{nbsp}{nbsp}subscribes]# +
end::pubsubporttype[]

tag::porttypeproperties[]

== *:psdd4ccm*

[none]
* [footnote]#xref:psdd4ccm-conn-port-topic[icon:caret-right[]{nbsp}{nbsp}topic]#
* [footnote]#xref:psdd4ccm-conn-port-middleware[icon:caret-right[]{nbsp}{nbsp}middleware]#
* [footnote]#xref:psdd4ccm-conn-port-topic_namespace[icon:caret-right[]{nbsp}{nbsp}topic_namespace]#
* [footnote]#xref:psdd4ccm-conn-port-topic_sequence_suffix[icon:caret-right[]{nbsp}{nbsp}topic_sequence_suffix]#
* [footnote]#xref:psdd4ccm-conn-port-topic_sequence[icon:caret-right[]{nbsp}{nbsp}topic_sequence]#
* [footnote]#xref:psdd4ccm-conn-port-topic_interface_suffix[icon:caret-right[]{nbsp}{nbsp}topic_interface_suffix]#
* [footnote]#xref:psdd4ccm-conn-port-topic_interface[icon:caret-right[]{nbsp}{nbsp}topic_interface]#

For _PSDD4CCM_ connector types the following additional port type property specification is
required.

[cols="<2m,<8a",options="header"]
|=======================================================================
|Property |

|[[psdd4ccm-conn-port-topic]]topic
|
Description::
Specifies the scoped IDL typename of the IDL
defined type (from the IDL file specified by the 'idl' property) for
which the Pub/Sub interface is intended.  This property is mandatory.
Syntax::
port.topic <<<Value type declarations,string>>>

.example
[source, ruby]
----
connector 'my_conn' do \|conn\|
  # ...
  conn.port_type :psdd4ccm do \|tp\|
    tp.topic  'Hello::ShapeType'
  end
  # ...
end
----

|=======================================================================

For _PSDD4CCM_ connector types the following additional, optional, port type property specifications are
possible.

[cols="<2m,<8a",options="header"]
|=======================================================================
|Property |

|[[psdd4ccm-conn-port-middleware]]middleware
|
Description::
Specifies the middleware to use for the connector implementation. +
PSDD4CCM currently only supports 'zmq'.
Syntax::
port.middleware <<<Value type declarations,stringlist>>> \| <<<Value type declarations,symbollist>>>

.example
[source, ruby]
----
connector 'my_conn' do \|conn\|
  # ...
  conn.port_type :psdd4ccm do \|tp\|
    tp.topic  'Hello::ShapeType'
    tp.middleware 'zmq'
  end
  # ...
end
----

|[[psdd4ccm-conn-port-topic_namespace]]topic_namespace
|
Description::
Specifies the scoped IDL module name to use to enclose the topic sequence and topic
interface definitions in.
By default the definitions are enclosed in the same scope as the topic type.
Syntax::
port.topic <<<Value type declarations,string>>>

.example
[source, ruby]
----
connector 'my_conn' do \|conn\|
  # ...
  conn.port_type :psdd4ccm do \|tp\|
    tp.topic  'Hello::ShapeType'
    tp.topic_namespace 'Test'
  end
  # ...
end
----

|[[psdd4ccm-conn-port-topic_sequence_suffix]]topic_sequence_suffix
|
Description::
Specifies the suffix string used to derive the topic sequence type name from the
(unscoped) topic type name.
By default the suffix is `'Seq'`.
Syntax::
port.topic <<<Value type declarations,string>>>

.example
[source, ruby]
----
connector 'my_conn' do \|conn\|
  # ...
  conn.port_type :psdd4ccm do \|tp\|
    tp.topic  'Hello::ShapeType'
    tp.topic_sequence_suffix '_seq_t'
  end
  # ...
end
----

|[[psdd4ccm-conn-port-topic_sequence]]topic_sequence
|
Description::
Specifies the IDL typename to use for the topic sequence type.
By default the sequence type is named after the topic type with the suffix 'Seq' appended.
Syntax::
port.topic <<<Value type declarations,string>>>

.example
[source, ruby]
----
connector 'my_conn' do \|conn\|
  # ...
  conn.port_type :psdd4ccm do \|tp\|
    tp.topic  'Hello::ShapeType'
    tp.topic_sequence 'Shape_seq_t'
  end
  # ...
end
----

|[[psdd4ccm-conn-port-topic_interface_suffix]]topic_interface_suffix
|
Description::
Specifies the suffix string used to derive the topic interface module name from the
(unscoped) topic type name.
By default the suffix is `'Interface'`.
Syntax::
port.topic <<<Value type declarations,string>>>

.example
[source, ruby]
----
connector 'my_conn' do \|conn\|
  # ...
  conn.port_type :psdd4ccm do \|tp\|
    tp.topic  'Hello::ShapeType'
    tp.topic_interface_suffix '_interface'
  end
  # ...
end
----

|[[psdd4ccm-conn-port-topic_interface]]topic_interface
|
Description::
Specifies the IDL name to use for the topic interface module.
By default the interface module is named after the topic type with the suffix 'Interface' appended.
Specifies the scoped IDL typename of the IDL
defined type (from the IDL file specified by the 'idl' property) for
which the State/Event interface is intended.  This property is mandatory.
Syntax::
port.topic <<<Value type declarations,string>>>

.example
[source, ruby]
----
connector 'my_conn' do \|conn\|
  # ...
  conn.port_type :psdd4ccm do \|tp\|
    tp.topic  'Hello::ShapeType'
    tp_interface 'IShape'
  end
  # ...
end
----

|=======================================================================

end::porttypeproperties[]

tag::porttype[]

|[[psdd4ccm-comp-port-publishes]]publishes
|
Description::
Defines a publisher port for the topic type specified as argument. +
The IDL type specified should conform to the PSDD4CCM specification for port topic types.
For user defined IDL types the IDL compiler needs to be able to resolve the type through default
includes and/or the IDL files specified for the component recipe's `idl` property. Scoped IDL
typenames are supported.
Syntax::
port.publishes <<<Value type declarations,string>>> +
+
_or in condensed form:_ +
+
intf.port <<<Value type declarations,string>>>, publishes: <<<Value type declarations,string>>>

[source, ruby]
.example, block form
----
comp.define 'Module::Sender' do \|intf\|
  intf.port 'my_port' do \|port\|
    port.publishes 'Test::Shape'
  end
end
----

[source, ruby]
.example, condensed form
----
comp.define 'Module::Sender' do \|intf\|
  intf.port 'my_port', publishes: 'Test::Shape'
end
----

|[[psdd4ccm-comp-port-subscribes]]subscribes
|
Description::
Defines a subscriber port for the topic type specified as argument. +
The IDL type specified should conform to the PSDD4CCM specification for port topic types.
For user defined IDL types the IDL compiler needs to be able to resolve the type through default
includes and/or the IDL files specified for the component recipe's `idl` property. Scoped IDL
typenames are supported.
Syntax::
port.subscribes <<<Value type declarations,string>>> +
_or_ +
port.subscribes <<<Value type declarations,string>>>, <data receptacles> +
+
_or in condensed form:_ +
+
intf.port <<<Value type declarations,string>>>, subscribes: <<<Value type declarations,string>>> +
_or_ +
intf.port <<<Value type declarations,string>>>, subscribes: [<<<Value type declarations,string>>>, <data receptacles>]
+
<data receptacles> specifies the PSDD data receptacles desired for the port.
By default apart from the mandatory _subscribe_ receptacle (with the name equal to the specified
port name) both a _listener_ and a _getter_ receptacle will be defined named respectively
'<portname>_listen' and '<portname>_get'.
By specifying a single string (or symbol) like `'listen'` or `'get'` (or `:listen` or `:get`) a single
data receptacle can be defined with default naming.
By specifying a _Hash_ with either one or two tuples specifying receptacle type as the key and the name as value like
`listen: 'my_listener'` or `listen: 'my_listener', get: 'my_getter'` the default naming scheme can be overruled for a
single receptacle or both.
When using the condensed port declaration form the port name and the data receptacles specification need to be combined
in a single array value for the port type tuple.

[source, ruby]
.example, block form
----
comp.define 'Module::Receiver' do \|intf\|
  intf.port 'my_port' do \|port\|
    port.subscribes 'Test::Shape'
  end
end
----

[source, ruby]
.example, block form with listen receptacle selection
----
comp.define 'Module::Receiver' do \|intf\|
  intf.port 'my_port' do \|port\|
    port.subscribes 'Test::Shape', 'listen'
  end
end
----

[source, ruby]
.example, condensed form
----
comp.define 'Module::Receiver' do \|intf\|
  intf.port 'my_port', subscribes: 'Test::Shape'
end
----

[source, ruby]
.example, condensed form with default named receptacle specification
----
comp.define 'Module::Receiver' do \|intf\|
  intf.port 'my_port', subscribes: ['Test::Shape', :get]
end
----

[source, ruby]
.example, condensed form with user named receptacle specifications
----
comp.define 'Module::Receiver' do \|intf\|
  intf.port 'my_port', subscribes: ['Test::Shape', listen: 'my_listener', get: 'my_getter']
end
----

end::porttype[]
