
// generated from <%= ridl_template_path %>
namespace <%= executor_cxx_namespace %>
{
% nest { visit_component_pre }

  <%= lem_name %>_ExecutorLocator::<%= lem_name %>_ExecutorLocator (
      IDL::traits< <%= scoped_ccm_name %>>::ref_type component_executor,
      IDL::traits<<%= lem_name %>_Context>::ref_type component_context) :
        component_executor_ (std::move (component_executor)),
        component_context_ (std::move (component_context))
  {
  }

  bool
  <%= lem_name %>_ExecutorLocator::connect (
      const ::Components::FeatureName& name,
      IDL::traits<CORBA::Object>::ref_type connection,
      const std::string& conn_name,
      const ::Components::ConfigValues& config)
  {
% nest { visit_connect }
  }

  bool
  <%= lem_name %>_ExecutorLocator::disconnect (
      const ::Components::FeatureName& name,
      const std::string& conn_name)
  {
% nest { visit_disconnect }
  }

  void
  <%= lem_name %>_ExecutorLocator::configure (
      ::Components::ConfigValues& config)
  {
% nest { visit_configure }
  }

% if any_mutable_attributes_incl_mirror_port?
  void
  <%= lem_name %>_ExecutorLocator::set_configuration (const Components::ConfigValues& descr)
  {
    Components::NameList name_list;
    for (const auto& config_value : descr)
    {
      Components::FeatureName const & descr_name = config_value.name ();
      CORBA::Any const & descr_value = config_value.value ();

%   all_attributes_incl_mirror_port.each_with_index do |attr, _index|
%       if _index == 0
      if (descr_name == "<%= attr.name %>")
%       else
      else if (descr_name == "<%= attr.name %>")
%       end
%     if attr.is_readonly?
      {
        // Received value for a readonly attribute which is
        // a configuration error
        name_list.push_back (descr_name);
      }
%     else
      {
        <%= attr.cxx_member_type %> _extract_val<%= attr.zero_initializer %>;
        if (!(descr_value >>= _extract_val))
        {
          // Unable to extract value from Any
          name_list.push_back (descr_name);
        }
        else
        {
          this->component_executor_-><%= attr.cxxname %> (_extract_val);
        }
      }
%     end
%   end
    }
    if (!name_list.empty ())
    {
      throw CIAOX11::ConfigurationError (name_list);
    }
  }

% end
  IDL::traits<CORBA::Object>::ref_type
  <%= lem_name %>_ExecutorLocator::obtain_executor ()
  {
    return this->component_executor_;
  }

% nest { visit_component_obtain_facet_executor }

  <%= lem_name %>_Context::<%= lem_name %>_Context (
      IDL::traits<CIAOX11::Service_Registry>::ref_type svcreg,
      std::string ins_name) :
        service_registry_ (std::move (svcreg)),
        instance_id_ (std::move (ins_name))
  {
  }

  IDL::traits< ::CIAOX11::Service_Registry>::ref_type
  <%= lem_name %>_Context::the_service_registry ()
  {
    return this->service_registry_;
  }

% if all_incl_receptacle_port?
%   all_ports.each do |_p|
%     if _p.port_type == :receptacle
%       if _p.is_multiple?
  <%= scoped_ccm_name %>::<%= _p.lem_name %>Connections
  <%= lem_name %>_Context::get_connections_<%= _p.lem_name %> ()
  {
    std::lock_guard<std::mutex> lock (this->context_tbl_lock_);
    <%= scoped_ccm_name %>::<%= _p.lem_name %>Connections retv;
    retv.reserve (this-><%= _p.lem_name %>_context_tbl_.size());
    using conn_type = IDL::traits< <%= scoped_ccm_name %>::<%= _p.lem_name %>Connections>::element_traits::value_type;

    for (const auto& elem : this-><%= _p.lem_name %>_context_tbl_)
    {
      retv.push_back (conn_type(elem.second, elem.first));
    }

    return retv;
  }
%       else
  IDL::traits<<%= _p.interface_type.scoped_cxxname %>>::ref_type
  <%= lem_name %>_Context::get_connection_<%= _p.lem_name %> ()
  {
    return this-><%= _p.cxxname %>_;
  }
%       end
%     end
%   end
% nest (1) { visit_context_extra_receptacles }

% nest (1) { visit_context_set_connection }

% nest (1) { visit_context_reset_connection }

% end
  std::string
  <%= lem_name %>_Context::instance_id ()
  {
    return this->instance_id_;
  }
} /* <%= executor_cxx_namespace %> */

extern "C" void
create_<%= scoped_name.scope_to_cxxname %>_Servant (
  IDL::traits<Components::EnterpriseComponent>::ref_type p,
  IDL::traits<CIAOX11::Service_Registry>::ref_type svcreg,
  const std::string& ins_name,
  IDL::traits<CIAOX11::ExecutorLocator>::ref_type& executor_locator)
{
  IDL::traits< <%= scoped_ccm_name %>>::ref_type component_executor =
    IDL::traits< <%= scoped_ccm_name %>>::narrow (std::move(p));

  if (component_executor)
  {
    // Create the context for this component, passing in it's ServiceRegistry
    IDL::traits<<%= executor_cxx_namespace %>::<%= lem_name %>_Context>::ref_type context =
      CORBA::make_reference<<%= executor_cxx_namespace %>::<%= lem_name %>_Context> (std::move(svcreg), ins_name);

    // Set the new context onto the user component executor
    component_executor->set_session_context (context);

    // Create the executor locator which holds the references
    // to all created entities
    executor_locator =
      CORBA::make_reference <<%= executor_cxx_namespace %>::<%= lem_name %>_ExecutorLocator> (
        std::move (component_executor),
        std::move (context));
  }
}
