
// generated from <%= ridl_template_path %>
void
<%= interface.skel_cxxname %>_get_<%= cxxname %>_RequestHandler::init (TAO_ServerRequest& srvreq)
{
  this->_exf_rh_init_handler (srvreq);
}

void
<%= interface.skel_cxxname %>_get_<%= cxxname %>_RequestHandler::execute (
    IDL::traits<::<%= interface.scoped_cxxname %>>::ref_type& executor)
{
  this->val_ = executor-><%= cxxname %> ();
}

void
<%= interface.skel_cxxname %>_get_<%= cxxname %>_RequestHandler::send_reply ()
{
  this->_exf_rh_init_reply ();

  if (this->_exf_operation_details ()) // in case of collocated call
  {
    PS::get_ret_arg<<%= scoped_cxx_arg_type %>> (this->_exf_operation_details (), nullptr) = std::move (this->val_);
  }
  else
  {
    if (!(this->_exf_rh_output () << <%= cdr_to_fmt % 'this->val_' %>))
    {
      throw TAO_CORBA::MARSHAL();
    }
  }

  this->_exf_rh_send_reply ();
}
% unless is_readonly?

void
<%= interface.skel_cxxname %>_set_<%= cxxname %>_RequestHandler::init (TAO_ServerRequest& srvreq)
{
  if (srvreq.incoming () == nullptr) // in case of a collocated call
  {
    this->val_ = std::move (PS::get_in_arg<<%= scoped_cxx_arg_type %>> (srvreq.operation_details (), nullptr, 1));
  }
  else
  {
    TAO_InputCDR & _tao_in = *srvreq.incoming ();

    if (!((_tao_in >> <%= cdr_from_fmt % 'this->val_' %>)))
    {
      throw TAO_CORBA::MARSHAL();
    }
  }

  this->_exf_rh_init_handler (srvreq);
}

void
<%= interface.skel_cxxname %>_set_<%= cxxname %>_RequestHandler::execute (
    IDL::traits<::<%= interface.scoped_cxxname %>>::ref_type& executor)
{
  executor-><%= cxxname %> (this->val_);
}

void
<%= interface.skel_cxxname %>_set_<%= cxxname %>_RequestHandler::send_reply ()
{
  this->_exf_rh_init_reply ();

  this->_exf_rh_send_reply ();
}
% end
